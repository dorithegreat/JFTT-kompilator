    lex.py: 924:lex: tokens   = ('LBR', 'RBR', 'LPAR', 'RPAR', 'FOR', 'FROM', 'TO', 'DOWNTO', 'ENDFOR', 'PROCEDURE', 'IS', 'BEGIN', 'END', 'PROGRAM', 'IF', 'THEN', 'ELSE', 'ENDIF', 'WHILE', 'DO', 'ENDWHILE', 'REPEAT', 'UNTIL', 'READ', 'WRITE', 'PID', 'NUM', 'T', 'ADD', 'SUB', 'MUL', 'DIV', 'MOD', 'EQ', 'NEQ', 'GT', 'LT', 'GEQ', 'LEQ', 'COM', 'ASSIGN', 'SEMICOLON', 'COMMA')
    lex.py: 925:lex: literals = ''
    lex.py: 926:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 953:lex: Adding rule t_NUM -> '[0-9]+' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PROCEDURE -> 'PROCEDURE' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ENDWHILE -> 'ENDWHILE' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PROGRAM -> 'PROGRAM' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PID -> '[_a-z]+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DOWNTO -> 'DOWNTO' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ENDFOR -> 'ENDFOR' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_REPEAT -> 'REPEAT' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_BEGIN -> 'BEGIN' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ENDIF -> 'ENDIF' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_WHILE -> 'WHILE' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_UNTIL -> 'UNTIL' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_WRITE -> 'WRITE' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_FROM -> 'FROM' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_THEN -> 'THEN' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ELSE -> 'ELSE' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_READ -> 'READ' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_COM -> '\#.*' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ASSIGN -> '\:\=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_FOR -> 'FOR' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_END -> 'END' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_NEQ -> '\!=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_TO -> 'TO' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_IS -> 'IS' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_IF -> 'IF' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DO -> 'DO' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LBR -> '\[' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RBR -> '\]' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LPAR -> '\(' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RPAR -> '\)' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ADD -> '\+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MUL -> '\*' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DIV -> '\/' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MOD -> '\%' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_EQ -> '\=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_GEQ -> '>=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LEQ -> '<=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SEMICOLON -> '\;' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_T -> 'T' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SUB -> '-' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LT -> '<' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_GT -> '>' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_COMMA -> ',' (state 'INITIAL')
    lex.py: 966:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 975:lex: state 'INITIAL' : regex[0] = '(?P<t_NUM>[0-9]+)|(?P<t_newline>\n+)|(?P<t_PROCEDURE>PROCEDURE)|(?P<t_ENDWHILE>ENDWHILE)|(?P<t_PROGRAM>PROGRAM)|(?P<t_PID>[_a-z]+)|(?P<t_DOWNTO>DOWNTO)|(?P<t_ENDFOR>ENDFOR)|(?P<t_REPEAT>REPEAT)|(?P<t_BEGIN>BEGIN)|(?P<t_ENDIF>ENDIF)|(?P<t_WHILE>WHILE)|(?P<t_UNTIL>UNTIL)|(?P<t_WRITE>WRITE)|(?P<t_FROM>FROM)|(?P<t_THEN>THEN)|(?P<t_ELSE>ELSE)|(?P<t_READ>READ)|(?P<t_COM>\#.*)|(?P<t_ASSIGN>\:\=)|(?P<t_FOR>FOR)|(?P<t_END>END)|(?P<t_NEQ>\!=)|(?P<t_TO>TO)|(?P<t_IS>IS)|(?P<t_IF>IF)|(?P<t_DO>DO)|(?P<t_LBR>\[)|(?P<t_RBR>\])|(?P<t_LPAR>\()|(?P<t_RPAR>\))|(?P<t_ADD>\+)|(?P<t_MUL>\*)|(?P<t_DIV>\/)|(?P<t_MOD>\%)|(?P<t_EQ>\=)|(?P<t_GEQ>>=)|(?P<t_LEQ><=)|(?P<t_SEMICOLON>\;)|(?P<t_T>T)|(?P<t_SUB>-)|(?P<t_LT><)|(?P<t_GT>>)|(?P<t_COMMA>,)'
   yacc.py:3317:Created by PLY version 3.11 (http://www.dabeaz.com/ply)
   yacc.py:3368:
   yacc.py:3369:Unused terminals:
   yacc.py:3370:
   yacc.py:3373:    COM
   yacc.py:3377:
   yacc.py:3378:Grammar
   yacc.py:3379:
   yacc.py:3381:Rule 0     S' -> program_all
   yacc.py:3381:Rule 1     program_all -> procedures main
   yacc.py:3381:Rule 2     procedures -> procedures PROCEDURE proc_head IS declarations BEGIN commands END
   yacc.py:3381:Rule 3     procedures -> procedures PROCEDURE proc_head IS BEGIN commands END
   yacc.py:3381:Rule 4     procedures -> empty
   yacc.py:3381:Rule 5     main -> PROGRAM IS declarations BEGIN commands END
   yacc.py:3381:Rule 6     main -> PROGRAM IS BEGIN commands END
   yacc.py:3381:Rule 7     commands -> commands command
   yacc.py:3381:Rule 8     commands -> command
   yacc.py:3381:Rule 9     command -> identifier ASSIGN expression SEMICOLON
   yacc.py:3381:Rule 10    command -> IF condition THEN commands ELSE commands ENDIF
   yacc.py:3381:Rule 11    command -> IF condition THEN commands ENDIF
   yacc.py:3381:Rule 12    command -> WHILE condition DO commands ENDWHILE
   yacc.py:3381:Rule 13    command -> REPEAT commands UNTIL condition SEMICOLON
   yacc.py:3381:Rule 14    command -> FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:3381:Rule 15    command -> FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:3381:Rule 16    command -> proc_call
   yacc.py:3381:Rule 17    command -> READ identifier SEMICOLON
   yacc.py:3381:Rule 18    command -> WRITE value SEMICOLON
   yacc.py:3381:Rule 19    proc_head -> PID LPAR args_decl RPAR
   yacc.py:3381:Rule 20    proc_call -> PID LPAR args RPAR
   yacc.py:3381:Rule 21    declarations -> declarations COMMA PID
   yacc.py:3381:Rule 22    declarations -> declarations COMMA PID LBR NUM : NUM RBR
   yacc.py:3381:Rule 23    declarations -> PID
   yacc.py:3381:Rule 24    declarations -> PID LBR NUM : NUM RBR
   yacc.py:3381:Rule 25    args_decl -> args_decl PID
   yacc.py:3381:Rule 26    args_decl -> args_decl T PID
   yacc.py:3381:Rule 27    args_decl -> PID
   yacc.py:3381:Rule 28    args_decl -> T PID
   yacc.py:3381:Rule 29    args -> args PID
   yacc.py:3381:Rule 30    args -> PID
   yacc.py:3381:Rule 31    expression -> value
   yacc.py:3381:Rule 32    expression -> value ADD value
   yacc.py:3381:Rule 33    expression -> value SUB value
   yacc.py:3381:Rule 34    expression -> value MUL value
   yacc.py:3381:Rule 35    expression -> value DIV value
   yacc.py:3381:Rule 36    expression -> value MOD value
   yacc.py:3381:Rule 37    condition -> value EQ value
   yacc.py:3381:Rule 38    condition -> value NEQ value
   yacc.py:3381:Rule 39    condition -> value GT value
   yacc.py:3381:Rule 40    condition -> value LT value
   yacc.py:3381:Rule 41    condition -> value GEQ value
   yacc.py:3381:Rule 42    condition -> value LEQ value
   yacc.py:3381:Rule 43    value -> NUM
   yacc.py:3381:Rule 44    value -> identifier
   yacc.py:3381:Rule 45    identifier -> PID
   yacc.py:3381:Rule 46    identifier -> PID LBR PID RBR
   yacc.py:3381:Rule 47    identifier -> PID LBR NUM RBR
   yacc.py:3381:Rule 48    empty -> <empty>
   yacc.py:3399:
   yacc.py:3400:Terminals, with rules where they appear
   yacc.py:3401:
   yacc.py:3405::                    : 22 24
   yacc.py:3405:ADD                  : 32
   yacc.py:3405:ASSIGN               : 9
   yacc.py:3405:BEGIN                : 2 3 5 6
   yacc.py:3405:COM                  : 
   yacc.py:3405:COMMA                : 21 22
   yacc.py:3405:DIV                  : 35
   yacc.py:3405:DO                   : 12 14 15
   yacc.py:3405:DOWNTO               : 15
   yacc.py:3405:ELSE                 : 10
   yacc.py:3405:END                  : 2 3 5 6
   yacc.py:3405:ENDFOR               : 14 15
   yacc.py:3405:ENDIF                : 10 11
   yacc.py:3405:ENDWHILE             : 12
   yacc.py:3405:EQ                   : 37
   yacc.py:3405:FOR                  : 14 15
   yacc.py:3405:FROM                 : 14 15
   yacc.py:3405:GEQ                  : 41
   yacc.py:3405:GT                   : 39
   yacc.py:3405:IF                   : 10 11
   yacc.py:3405:IS                   : 2 3 5 6
   yacc.py:3405:LBR                  : 22 24 46 47
   yacc.py:3405:LEQ                  : 42
   yacc.py:3405:LPAR                 : 19 20
   yacc.py:3405:LT                   : 40
   yacc.py:3405:MOD                  : 36
   yacc.py:3405:MUL                  : 34
   yacc.py:3405:NEQ                  : 38
   yacc.py:3405:NUM                  : 22 22 24 24 43 47
   yacc.py:3405:PID                  : 14 15 19 20 21 22 23 24 25 26 27 28 29 30 45 46 46 47
   yacc.py:3405:PROCEDURE            : 2 3
   yacc.py:3405:PROGRAM              : 5 6
   yacc.py:3405:RBR                  : 22 24 46 47
   yacc.py:3405:READ                 : 17
   yacc.py:3405:REPEAT               : 13
   yacc.py:3405:RPAR                 : 19 20
   yacc.py:3405:SEMICOLON            : 9 13 17 18
   yacc.py:3405:SUB                  : 33
   yacc.py:3405:T                    : 26 28
   yacc.py:3405:THEN                 : 10 11
   yacc.py:3405:TO                   : 14
   yacc.py:3405:UNTIL                : 13
   yacc.py:3405:WHILE                : 12
   yacc.py:3405:WRITE                : 18
   yacc.py:3405:error                : 
   yacc.py:3407:
   yacc.py:3408:Nonterminals, with rules where they appear
   yacc.py:3409:
   yacc.py:3413:args                 : 20 29
   yacc.py:3413:args_decl            : 19 25 26
   yacc.py:3413:command              : 7 8
   yacc.py:3413:commands             : 2 3 5 6 7 10 10 11 12 13 14 15
   yacc.py:3413:condition            : 10 11 12 13
   yacc.py:3413:declarations         : 2 5 21 22
   yacc.py:3413:empty                : 4
   yacc.py:3413:expression           : 9
   yacc.py:3413:identifier           : 9 17 44
   yacc.py:3413:main                 : 1
   yacc.py:3413:proc_call            : 16
   yacc.py:3413:proc_head            : 2 3
   yacc.py:3413:procedures           : 1 2 3
   yacc.py:3413:program_all          : 0
   yacc.py:3413:value                : 14 14 15 15 18 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42
   yacc.py:3414:
   yacc.py:2543:Parsing method: LALR
   yacc.py:2561:
   yacc.py:2562:state 0
   yacc.py:2563:
   yacc.py:2565:    (0) S' -> . program_all
   yacc.py:2565:    (1) program_all -> . procedures main
   yacc.py:2565:    (2) procedures -> . procedures PROCEDURE proc_head IS declarations BEGIN commands END
   yacc.py:2565:    (3) procedures -> . procedures PROCEDURE proc_head IS BEGIN commands END
   yacc.py:2565:    (4) procedures -> . empty
   yacc.py:2565:    (48) empty -> .
   yacc.py:2566:
   yacc.py:2687:    PROCEDURE       reduce using rule 48 (empty -> .)
   yacc.py:2687:    PROGRAM         reduce using rule 48 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    program_all                    shift and go to state 1
   yacc.py:2714:    procedures                     shift and go to state 2
   yacc.py:2714:    empty                          shift and go to state 3
   yacc.py:2561:
   yacc.py:2562:state 1
   yacc.py:2563:
   yacc.py:2565:    (0) S' -> program_all .
   yacc.py:2566:
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 2
   yacc.py:2563:
   yacc.py:2565:    (1) program_all -> procedures . main
   yacc.py:2565:    (2) procedures -> procedures . PROCEDURE proc_head IS declarations BEGIN commands END
   yacc.py:2565:    (3) procedures -> procedures . PROCEDURE proc_head IS BEGIN commands END
   yacc.py:2565:    (5) main -> . PROGRAM IS declarations BEGIN commands END
   yacc.py:2565:    (6) main -> . PROGRAM IS BEGIN commands END
   yacc.py:2566:
   yacc.py:2687:    PROCEDURE       shift and go to state 5
   yacc.py:2687:    PROGRAM         shift and go to state 6
   yacc.py:2689:
   yacc.py:2714:    main                           shift and go to state 4
   yacc.py:2561:
   yacc.py:2562:state 3
   yacc.py:2563:
   yacc.py:2565:    (4) procedures -> empty .
   yacc.py:2566:
   yacc.py:2687:    PROCEDURE       reduce using rule 4 (procedures -> empty .)
   yacc.py:2687:    PROGRAM         reduce using rule 4 (procedures -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 4
   yacc.py:2563:
   yacc.py:2565:    (1) program_all -> procedures main .
   yacc.py:2566:
   yacc.py:2687:    $end            reduce using rule 1 (program_all -> procedures main .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 5
   yacc.py:2563:
   yacc.py:2565:    (2) procedures -> procedures PROCEDURE . proc_head IS declarations BEGIN commands END
   yacc.py:2565:    (3) procedures -> procedures PROCEDURE . proc_head IS BEGIN commands END
   yacc.py:2565:    (19) proc_head -> . PID LPAR args_decl RPAR
   yacc.py:2566:
   yacc.py:2687:    PID             shift and go to state 8
   yacc.py:2689:
   yacc.py:2714:    proc_head                      shift and go to state 7
   yacc.py:2561:
   yacc.py:2562:state 6
   yacc.py:2563:
   yacc.py:2565:    (5) main -> PROGRAM . IS declarations BEGIN commands END
   yacc.py:2565:    (6) main -> PROGRAM . IS BEGIN commands END
   yacc.py:2566:
   yacc.py:2687:    IS              shift and go to state 9
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 7
   yacc.py:2563:
   yacc.py:2565:    (2) procedures -> procedures PROCEDURE proc_head . IS declarations BEGIN commands END
   yacc.py:2565:    (3) procedures -> procedures PROCEDURE proc_head . IS BEGIN commands END
   yacc.py:2566:
   yacc.py:2687:    IS              shift and go to state 10
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 8
   yacc.py:2563:
   yacc.py:2565:    (19) proc_head -> PID . LPAR args_decl RPAR
   yacc.py:2566:
   yacc.py:2687:    LPAR            shift and go to state 11
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 9
   yacc.py:2563:
   yacc.py:2565:    (5) main -> PROGRAM IS . declarations BEGIN commands END
   yacc.py:2565:    (6) main -> PROGRAM IS . BEGIN commands END
   yacc.py:2565:    (21) declarations -> . declarations COMMA PID
   yacc.py:2565:    (22) declarations -> . declarations COMMA PID LBR NUM : NUM RBR
   yacc.py:2565:    (23) declarations -> . PID
   yacc.py:2565:    (24) declarations -> . PID LBR NUM : NUM RBR
   yacc.py:2566:
   yacc.py:2687:    BEGIN           shift and go to state 13
   yacc.py:2687:    PID             shift and go to state 14
   yacc.py:2689:
   yacc.py:2714:    declarations                   shift and go to state 12
   yacc.py:2561:
   yacc.py:2562:state 10
   yacc.py:2563:
   yacc.py:2565:    (2) procedures -> procedures PROCEDURE proc_head IS . declarations BEGIN commands END
   yacc.py:2565:    (3) procedures -> procedures PROCEDURE proc_head IS . BEGIN commands END
   yacc.py:2565:    (21) declarations -> . declarations COMMA PID
   yacc.py:2565:    (22) declarations -> . declarations COMMA PID LBR NUM : NUM RBR
   yacc.py:2565:    (23) declarations -> . PID
   yacc.py:2565:    (24) declarations -> . PID LBR NUM : NUM RBR
   yacc.py:2566:
   yacc.py:2687:    BEGIN           shift and go to state 16
   yacc.py:2687:    PID             shift and go to state 14
   yacc.py:2689:
   yacc.py:2714:    declarations                   shift and go to state 15
   yacc.py:2561:
   yacc.py:2562:state 11
   yacc.py:2563:
   yacc.py:2565:    (19) proc_head -> PID LPAR . args_decl RPAR
   yacc.py:2565:    (25) args_decl -> . args_decl PID
   yacc.py:2565:    (26) args_decl -> . args_decl T PID
   yacc.py:2565:    (27) args_decl -> . PID
   yacc.py:2565:    (28) args_decl -> . T PID
   yacc.py:2566:
   yacc.py:2687:    PID             shift and go to state 17
   yacc.py:2687:    T               shift and go to state 19
   yacc.py:2689:
   yacc.py:2714:    args_decl                      shift and go to state 18
   yacc.py:2561:
   yacc.py:2562:state 12
   yacc.py:2563:
   yacc.py:2565:    (5) main -> PROGRAM IS declarations . BEGIN commands END
   yacc.py:2565:    (21) declarations -> declarations . COMMA PID
   yacc.py:2565:    (22) declarations -> declarations . COMMA PID LBR NUM : NUM RBR
   yacc.py:2566:
   yacc.py:2687:    BEGIN           shift and go to state 20
   yacc.py:2687:    COMMA           shift and go to state 21
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 13
   yacc.py:2563:
   yacc.py:2565:    (6) main -> PROGRAM IS BEGIN . commands END
   yacc.py:2565:    (7) commands -> . commands command
   yacc.py:2565:    (8) commands -> . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    commands                       shift and go to state 22
   yacc.py:2714:    command                        shift and go to state 23
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 14
   yacc.py:2563:
   yacc.py:2565:    (23) declarations -> PID .
   yacc.py:2565:    (24) declarations -> PID . LBR NUM : NUM RBR
   yacc.py:2566:
   yacc.py:2687:    BEGIN           reduce using rule 23 (declarations -> PID .)
   yacc.py:2687:    COMMA           reduce using rule 23 (declarations -> PID .)
   yacc.py:2687:    LBR             shift and go to state 33
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 15
   yacc.py:2563:
   yacc.py:2565:    (2) procedures -> procedures PROCEDURE proc_head IS declarations . BEGIN commands END
   yacc.py:2565:    (21) declarations -> declarations . COMMA PID
   yacc.py:2565:    (22) declarations -> declarations . COMMA PID LBR NUM : NUM RBR
   yacc.py:2566:
   yacc.py:2687:    BEGIN           shift and go to state 34
   yacc.py:2687:    COMMA           shift and go to state 21
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 16
   yacc.py:2563:
   yacc.py:2565:    (3) procedures -> procedures PROCEDURE proc_head IS BEGIN . commands END
   yacc.py:2565:    (7) commands -> . commands command
   yacc.py:2565:    (8) commands -> . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    commands                       shift and go to state 35
   yacc.py:2714:    command                        shift and go to state 23
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 17
   yacc.py:2563:
   yacc.py:2565:    (27) args_decl -> PID .
   yacc.py:2566:
   yacc.py:2687:    RPAR            reduce using rule 27 (args_decl -> PID .)
   yacc.py:2687:    PID             reduce using rule 27 (args_decl -> PID .)
   yacc.py:2687:    T               reduce using rule 27 (args_decl -> PID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 18
   yacc.py:2563:
   yacc.py:2565:    (19) proc_head -> PID LPAR args_decl . RPAR
   yacc.py:2565:    (25) args_decl -> args_decl . PID
   yacc.py:2565:    (26) args_decl -> args_decl . T PID
   yacc.py:2566:
   yacc.py:2687:    RPAR            shift and go to state 37
   yacc.py:2687:    PID             shift and go to state 36
   yacc.py:2687:    T               shift and go to state 38
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 19
   yacc.py:2563:
   yacc.py:2565:    (28) args_decl -> T . PID
   yacc.py:2566:
   yacc.py:2687:    PID             shift and go to state 39
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 20
   yacc.py:2563:
   yacc.py:2565:    (5) main -> PROGRAM IS declarations BEGIN . commands END
   yacc.py:2565:    (7) commands -> . commands command
   yacc.py:2565:    (8) commands -> . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    commands                       shift and go to state 40
   yacc.py:2714:    command                        shift and go to state 23
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 21
   yacc.py:2563:
   yacc.py:2565:    (21) declarations -> declarations COMMA . PID
   yacc.py:2565:    (22) declarations -> declarations COMMA . PID LBR NUM : NUM RBR
   yacc.py:2566:
   yacc.py:2687:    PID             shift and go to state 41
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 22
   yacc.py:2563:
   yacc.py:2565:    (6) main -> PROGRAM IS BEGIN commands . END
   yacc.py:2565:    (7) commands -> commands . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    END             shift and go to state 42
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    command                        shift and go to state 43
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 23
   yacc.py:2563:
   yacc.py:2565:    (8) commands -> command .
   yacc.py:2566:
   yacc.py:2687:    END             reduce using rule 8 (commands -> command .)
   yacc.py:2687:    IF              reduce using rule 8 (commands -> command .)
   yacc.py:2687:    WHILE           reduce using rule 8 (commands -> command .)
   yacc.py:2687:    REPEAT          reduce using rule 8 (commands -> command .)
   yacc.py:2687:    FOR             reduce using rule 8 (commands -> command .)
   yacc.py:2687:    READ            reduce using rule 8 (commands -> command .)
   yacc.py:2687:    WRITE           reduce using rule 8 (commands -> command .)
   yacc.py:2687:    PID             reduce using rule 8 (commands -> command .)
   yacc.py:2687:    UNTIL           reduce using rule 8 (commands -> command .)
   yacc.py:2687:    ELSE            reduce using rule 8 (commands -> command .)
   yacc.py:2687:    ENDIF           reduce using rule 8 (commands -> command .)
   yacc.py:2687:    ENDWHILE        reduce using rule 8 (commands -> command .)
   yacc.py:2687:    ENDFOR          reduce using rule 8 (commands -> command .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 24
   yacc.py:2563:
   yacc.py:2565:    (9) command -> identifier . ASSIGN expression SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    ASSIGN          shift and go to state 44
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 25
   yacc.py:2563:
   yacc.py:2565:    (10) command -> IF . condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> IF . condition THEN commands ENDIF
   yacc.py:2565:    (37) condition -> . value EQ value
   yacc.py:2565:    (38) condition -> . value NEQ value
   yacc.py:2565:    (39) condition -> . value GT value
   yacc.py:2565:    (40) condition -> . value LT value
   yacc.py:2565:    (41) condition -> . value GEQ value
   yacc.py:2565:    (42) condition -> . value LEQ value
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    condition                      shift and go to state 45
   yacc.py:2714:    value                          shift and go to state 46
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 26
   yacc.py:2563:
   yacc.py:2565:    (12) command -> WHILE . condition DO commands ENDWHILE
   yacc.py:2565:    (37) condition -> . value EQ value
   yacc.py:2565:    (38) condition -> . value NEQ value
   yacc.py:2565:    (39) condition -> . value GT value
   yacc.py:2565:    (40) condition -> . value LT value
   yacc.py:2565:    (41) condition -> . value GEQ value
   yacc.py:2565:    (42) condition -> . value LEQ value
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    condition                      shift and go to state 50
   yacc.py:2714:    value                          shift and go to state 46
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 27
   yacc.py:2563:
   yacc.py:2565:    (13) command -> REPEAT . commands UNTIL condition SEMICOLON
   yacc.py:2565:    (7) commands -> . commands command
   yacc.py:2565:    (8) commands -> . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    commands                       shift and go to state 51
   yacc.py:2714:    command                        shift and go to state 23
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 28
   yacc.py:2563:
   yacc.py:2565:    (14) command -> FOR . PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> FOR . PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2566:
   yacc.py:2687:    PID             shift and go to state 52
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 29
   yacc.py:2563:
   yacc.py:2565:    (45) identifier -> PID .
   yacc.py:2565:    (46) identifier -> PID . LBR PID RBR
   yacc.py:2565:    (47) identifier -> PID . LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> PID . LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    ASSIGN          reduce using rule 45 (identifier -> PID .)
   yacc.py:2687:    LBR             shift and go to state 53
   yacc.py:2687:    LPAR            shift and go to state 54
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 30
   yacc.py:2563:
   yacc.py:2565:    (16) command -> proc_call .
   yacc.py:2566:
   yacc.py:2687:    END             reduce using rule 16 (command -> proc_call .)
   yacc.py:2687:    IF              reduce using rule 16 (command -> proc_call .)
   yacc.py:2687:    WHILE           reduce using rule 16 (command -> proc_call .)
   yacc.py:2687:    REPEAT          reduce using rule 16 (command -> proc_call .)
   yacc.py:2687:    FOR             reduce using rule 16 (command -> proc_call .)
   yacc.py:2687:    READ            reduce using rule 16 (command -> proc_call .)
   yacc.py:2687:    WRITE           reduce using rule 16 (command -> proc_call .)
   yacc.py:2687:    PID             reduce using rule 16 (command -> proc_call .)
   yacc.py:2687:    UNTIL           reduce using rule 16 (command -> proc_call .)
   yacc.py:2687:    ELSE            reduce using rule 16 (command -> proc_call .)
   yacc.py:2687:    ENDIF           reduce using rule 16 (command -> proc_call .)
   yacc.py:2687:    ENDWHILE        reduce using rule 16 (command -> proc_call .)
   yacc.py:2687:    ENDFOR          reduce using rule 16 (command -> proc_call .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 31
   yacc.py:2563:
   yacc.py:2565:    (17) command -> READ . identifier SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    identifier                     shift and go to state 55
   yacc.py:2561:
   yacc.py:2562:state 32
   yacc.py:2563:
   yacc.py:2565:    (18) command -> WRITE . value SEMICOLON
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    value                          shift and go to state 56
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 33
   yacc.py:2563:
   yacc.py:2565:    (24) declarations -> PID LBR . NUM : NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 57
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 34
   yacc.py:2563:
   yacc.py:2565:    (2) procedures -> procedures PROCEDURE proc_head IS declarations BEGIN . commands END
   yacc.py:2565:    (7) commands -> . commands command
   yacc.py:2565:    (8) commands -> . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    commands                       shift and go to state 58
   yacc.py:2714:    command                        shift and go to state 23
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 35
   yacc.py:2563:
   yacc.py:2565:    (3) procedures -> procedures PROCEDURE proc_head IS BEGIN commands . END
   yacc.py:2565:    (7) commands -> commands . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    END             shift and go to state 59
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    command                        shift and go to state 43
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 36
   yacc.py:2563:
   yacc.py:2565:    (25) args_decl -> args_decl PID .
   yacc.py:2566:
   yacc.py:2687:    RPAR            reduce using rule 25 (args_decl -> args_decl PID .)
   yacc.py:2687:    PID             reduce using rule 25 (args_decl -> args_decl PID .)
   yacc.py:2687:    T               reduce using rule 25 (args_decl -> args_decl PID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 37
   yacc.py:2563:
   yacc.py:2565:    (19) proc_head -> PID LPAR args_decl RPAR .
   yacc.py:2566:
   yacc.py:2687:    IS              reduce using rule 19 (proc_head -> PID LPAR args_decl RPAR .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 38
   yacc.py:2563:
   yacc.py:2565:    (26) args_decl -> args_decl T . PID
   yacc.py:2566:
   yacc.py:2687:    PID             shift and go to state 60
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 39
   yacc.py:2563:
   yacc.py:2565:    (28) args_decl -> T PID .
   yacc.py:2566:
   yacc.py:2687:    RPAR            reduce using rule 28 (args_decl -> T PID .)
   yacc.py:2687:    PID             reduce using rule 28 (args_decl -> T PID .)
   yacc.py:2687:    T               reduce using rule 28 (args_decl -> T PID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 40
   yacc.py:2563:
   yacc.py:2565:    (5) main -> PROGRAM IS declarations BEGIN commands . END
   yacc.py:2565:    (7) commands -> commands . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    END             shift and go to state 61
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    command                        shift and go to state 43
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 41
   yacc.py:2563:
   yacc.py:2565:    (21) declarations -> declarations COMMA PID .
   yacc.py:2565:    (22) declarations -> declarations COMMA PID . LBR NUM : NUM RBR
   yacc.py:2566:
   yacc.py:2687:    BEGIN           reduce using rule 21 (declarations -> declarations COMMA PID .)
   yacc.py:2687:    COMMA           reduce using rule 21 (declarations -> declarations COMMA PID .)
   yacc.py:2687:    LBR             shift and go to state 62
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 42
   yacc.py:2563:
   yacc.py:2565:    (6) main -> PROGRAM IS BEGIN commands END .
   yacc.py:2566:
   yacc.py:2687:    $end            reduce using rule 6 (main -> PROGRAM IS BEGIN commands END .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 43
   yacc.py:2563:
   yacc.py:2565:    (7) commands -> commands command .
   yacc.py:2566:
   yacc.py:2687:    END             reduce using rule 7 (commands -> commands command .)
   yacc.py:2687:    IF              reduce using rule 7 (commands -> commands command .)
   yacc.py:2687:    WHILE           reduce using rule 7 (commands -> commands command .)
   yacc.py:2687:    REPEAT          reduce using rule 7 (commands -> commands command .)
   yacc.py:2687:    FOR             reduce using rule 7 (commands -> commands command .)
   yacc.py:2687:    READ            reduce using rule 7 (commands -> commands command .)
   yacc.py:2687:    WRITE           reduce using rule 7 (commands -> commands command .)
   yacc.py:2687:    PID             reduce using rule 7 (commands -> commands command .)
   yacc.py:2687:    UNTIL           reduce using rule 7 (commands -> commands command .)
   yacc.py:2687:    ELSE            reduce using rule 7 (commands -> commands command .)
   yacc.py:2687:    ENDIF           reduce using rule 7 (commands -> commands command .)
   yacc.py:2687:    ENDWHILE        reduce using rule 7 (commands -> commands command .)
   yacc.py:2687:    ENDFOR          reduce using rule 7 (commands -> commands command .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 44
   yacc.py:2563:
   yacc.py:2565:    (9) command -> identifier ASSIGN . expression SEMICOLON
   yacc.py:2565:    (31) expression -> . value
   yacc.py:2565:    (32) expression -> . value ADD value
   yacc.py:2565:    (33) expression -> . value SUB value
   yacc.py:2565:    (34) expression -> . value MUL value
   yacc.py:2565:    (35) expression -> . value DIV value
   yacc.py:2565:    (36) expression -> . value MOD value
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2714:    expression                     shift and go to state 63
   yacc.py:2714:    value                          shift and go to state 64
   yacc.py:2561:
   yacc.py:2562:state 45
   yacc.py:2563:
   yacc.py:2565:    (10) command -> IF condition . THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> IF condition . THEN commands ENDIF
   yacc.py:2566:
   yacc.py:2687:    THEN            shift and go to state 65
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 46
   yacc.py:2563:
   yacc.py:2565:    (37) condition -> value . EQ value
   yacc.py:2565:    (38) condition -> value . NEQ value
   yacc.py:2565:    (39) condition -> value . GT value
   yacc.py:2565:    (40) condition -> value . LT value
   yacc.py:2565:    (41) condition -> value . GEQ value
   yacc.py:2565:    (42) condition -> value . LEQ value
   yacc.py:2566:
   yacc.py:2687:    EQ              shift and go to state 66
   yacc.py:2687:    NEQ             shift and go to state 67
   yacc.py:2687:    GT              shift and go to state 68
   yacc.py:2687:    LT              shift and go to state 69
   yacc.py:2687:    GEQ             shift and go to state 70
   yacc.py:2687:    LEQ             shift and go to state 71
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 47
   yacc.py:2563:
   yacc.py:2565:    (43) value -> NUM .
   yacc.py:2566:
   yacc.py:2687:    EQ              reduce using rule 43 (value -> NUM .)
   yacc.py:2687:    NEQ             reduce using rule 43 (value -> NUM .)
   yacc.py:2687:    GT              reduce using rule 43 (value -> NUM .)
   yacc.py:2687:    LT              reduce using rule 43 (value -> NUM .)
   yacc.py:2687:    GEQ             reduce using rule 43 (value -> NUM .)
   yacc.py:2687:    LEQ             reduce using rule 43 (value -> NUM .)
   yacc.py:2687:    SEMICOLON       reduce using rule 43 (value -> NUM .)
   yacc.py:2687:    ADD             reduce using rule 43 (value -> NUM .)
   yacc.py:2687:    SUB             reduce using rule 43 (value -> NUM .)
   yacc.py:2687:    MUL             reduce using rule 43 (value -> NUM .)
   yacc.py:2687:    DIV             reduce using rule 43 (value -> NUM .)
   yacc.py:2687:    MOD             reduce using rule 43 (value -> NUM .)
   yacc.py:2687:    THEN            reduce using rule 43 (value -> NUM .)
   yacc.py:2687:    DO              reduce using rule 43 (value -> NUM .)
   yacc.py:2687:    TO              reduce using rule 43 (value -> NUM .)
   yacc.py:2687:    DOWNTO          reduce using rule 43 (value -> NUM .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 48
   yacc.py:2563:
   yacc.py:2565:    (44) value -> identifier .
   yacc.py:2566:
   yacc.py:2687:    EQ              reduce using rule 44 (value -> identifier .)
   yacc.py:2687:    NEQ             reduce using rule 44 (value -> identifier .)
   yacc.py:2687:    GT              reduce using rule 44 (value -> identifier .)
   yacc.py:2687:    LT              reduce using rule 44 (value -> identifier .)
   yacc.py:2687:    GEQ             reduce using rule 44 (value -> identifier .)
   yacc.py:2687:    LEQ             reduce using rule 44 (value -> identifier .)
   yacc.py:2687:    SEMICOLON       reduce using rule 44 (value -> identifier .)
   yacc.py:2687:    ADD             reduce using rule 44 (value -> identifier .)
   yacc.py:2687:    SUB             reduce using rule 44 (value -> identifier .)
   yacc.py:2687:    MUL             reduce using rule 44 (value -> identifier .)
   yacc.py:2687:    DIV             reduce using rule 44 (value -> identifier .)
   yacc.py:2687:    MOD             reduce using rule 44 (value -> identifier .)
   yacc.py:2687:    THEN            reduce using rule 44 (value -> identifier .)
   yacc.py:2687:    DO              reduce using rule 44 (value -> identifier .)
   yacc.py:2687:    TO              reduce using rule 44 (value -> identifier .)
   yacc.py:2687:    DOWNTO          reduce using rule 44 (value -> identifier .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 49
   yacc.py:2563:
   yacc.py:2565:    (45) identifier -> PID .
   yacc.py:2565:    (46) identifier -> PID . LBR PID RBR
   yacc.py:2565:    (47) identifier -> PID . LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    EQ              reduce using rule 45 (identifier -> PID .)
   yacc.py:2687:    NEQ             reduce using rule 45 (identifier -> PID .)
   yacc.py:2687:    GT              reduce using rule 45 (identifier -> PID .)
   yacc.py:2687:    LT              reduce using rule 45 (identifier -> PID .)
   yacc.py:2687:    GEQ             reduce using rule 45 (identifier -> PID .)
   yacc.py:2687:    LEQ             reduce using rule 45 (identifier -> PID .)
   yacc.py:2687:    SEMICOLON       reduce using rule 45 (identifier -> PID .)
   yacc.py:2687:    ADD             reduce using rule 45 (identifier -> PID .)
   yacc.py:2687:    SUB             reduce using rule 45 (identifier -> PID .)
   yacc.py:2687:    MUL             reduce using rule 45 (identifier -> PID .)
   yacc.py:2687:    DIV             reduce using rule 45 (identifier -> PID .)
   yacc.py:2687:    MOD             reduce using rule 45 (identifier -> PID .)
   yacc.py:2687:    THEN            reduce using rule 45 (identifier -> PID .)
   yacc.py:2687:    DO              reduce using rule 45 (identifier -> PID .)
   yacc.py:2687:    TO              reduce using rule 45 (identifier -> PID .)
   yacc.py:2687:    DOWNTO          reduce using rule 45 (identifier -> PID .)
   yacc.py:2687:    LBR             shift and go to state 53
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 50
   yacc.py:2563:
   yacc.py:2565:    (12) command -> WHILE condition . DO commands ENDWHILE
   yacc.py:2566:
   yacc.py:2687:    DO              shift and go to state 72
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 51
   yacc.py:2563:
   yacc.py:2565:    (13) command -> REPEAT commands . UNTIL condition SEMICOLON
   yacc.py:2565:    (7) commands -> commands . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    UNTIL           shift and go to state 73
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    command                        shift and go to state 43
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 52
   yacc.py:2563:
   yacc.py:2565:    (14) command -> FOR PID . FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> FOR PID . FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2566:
   yacc.py:2687:    FROM            shift and go to state 74
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 53
   yacc.py:2563:
   yacc.py:2565:    (46) identifier -> PID LBR . PID RBR
   yacc.py:2565:    (47) identifier -> PID LBR . NUM RBR
   yacc.py:2566:
   yacc.py:2687:    PID             shift and go to state 75
   yacc.py:2687:    NUM             shift and go to state 76
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 54
   yacc.py:2563:
   yacc.py:2565:    (20) proc_call -> PID LPAR . args RPAR
   yacc.py:2565:    (29) args -> . args PID
   yacc.py:2565:    (30) args -> . PID
   yacc.py:2566:
   yacc.py:2687:    PID             shift and go to state 77
   yacc.py:2689:
   yacc.py:2714:    args                           shift and go to state 78
   yacc.py:2561:
   yacc.py:2562:state 55
   yacc.py:2563:
   yacc.py:2565:    (17) command -> READ identifier . SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       shift and go to state 79
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 56
   yacc.py:2563:
   yacc.py:2565:    (18) command -> WRITE value . SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       shift and go to state 80
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 57
   yacc.py:2563:
   yacc.py:2565:    (24) declarations -> PID LBR NUM . : NUM RBR
   yacc.py:2566:
   yacc.py:2687:    :               shift and go to state 81
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 58
   yacc.py:2563:
   yacc.py:2565:    (2) procedures -> procedures PROCEDURE proc_head IS declarations BEGIN commands . END
   yacc.py:2565:    (7) commands -> commands . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    END             shift and go to state 82
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    command                        shift and go to state 43
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 59
   yacc.py:2563:
   yacc.py:2565:    (3) procedures -> procedures PROCEDURE proc_head IS BEGIN commands END .
   yacc.py:2566:
   yacc.py:2687:    PROCEDURE       reduce using rule 3 (procedures -> procedures PROCEDURE proc_head IS BEGIN commands END .)
   yacc.py:2687:    PROGRAM         reduce using rule 3 (procedures -> procedures PROCEDURE proc_head IS BEGIN commands END .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 60
   yacc.py:2563:
   yacc.py:2565:    (26) args_decl -> args_decl T PID .
   yacc.py:2566:
   yacc.py:2687:    RPAR            reduce using rule 26 (args_decl -> args_decl T PID .)
   yacc.py:2687:    PID             reduce using rule 26 (args_decl -> args_decl T PID .)
   yacc.py:2687:    T               reduce using rule 26 (args_decl -> args_decl T PID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 61
   yacc.py:2563:
   yacc.py:2565:    (5) main -> PROGRAM IS declarations BEGIN commands END .
   yacc.py:2566:
   yacc.py:2687:    $end            reduce using rule 5 (main -> PROGRAM IS declarations BEGIN commands END .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 62
   yacc.py:2563:
   yacc.py:2565:    (22) declarations -> declarations COMMA PID LBR . NUM : NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 83
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 63
   yacc.py:2563:
   yacc.py:2565:    (9) command -> identifier ASSIGN expression . SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       shift and go to state 84
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 64
   yacc.py:2563:
   yacc.py:2565:    (31) expression -> value .
   yacc.py:2565:    (32) expression -> value . ADD value
   yacc.py:2565:    (33) expression -> value . SUB value
   yacc.py:2565:    (34) expression -> value . MUL value
   yacc.py:2565:    (35) expression -> value . DIV value
   yacc.py:2565:    (36) expression -> value . MOD value
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 31 (expression -> value .)
   yacc.py:2687:    ADD             shift and go to state 85
   yacc.py:2687:    SUB             shift and go to state 86
   yacc.py:2687:    MUL             shift and go to state 87
   yacc.py:2687:    DIV             shift and go to state 88
   yacc.py:2687:    MOD             shift and go to state 89
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 65
   yacc.py:2563:
   yacc.py:2565:    (10) command -> IF condition THEN . commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> IF condition THEN . commands ENDIF
   yacc.py:2565:    (7) commands -> . commands command
   yacc.py:2565:    (8) commands -> . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    commands                       shift and go to state 90
   yacc.py:2714:    command                        shift and go to state 23
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 66
   yacc.py:2563:
   yacc.py:2565:    (37) condition -> value EQ . value
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    value                          shift and go to state 91
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 67
   yacc.py:2563:
   yacc.py:2565:    (38) condition -> value NEQ . value
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    value                          shift and go to state 92
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 68
   yacc.py:2563:
   yacc.py:2565:    (39) condition -> value GT . value
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    value                          shift and go to state 93
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 69
   yacc.py:2563:
   yacc.py:2565:    (40) condition -> value LT . value
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    value                          shift and go to state 94
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 70
   yacc.py:2563:
   yacc.py:2565:    (41) condition -> value GEQ . value
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    value                          shift and go to state 95
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 71
   yacc.py:2563:
   yacc.py:2565:    (42) condition -> value LEQ . value
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    value                          shift and go to state 96
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 72
   yacc.py:2563:
   yacc.py:2565:    (12) command -> WHILE condition DO . commands ENDWHILE
   yacc.py:2565:    (7) commands -> . commands command
   yacc.py:2565:    (8) commands -> . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    commands                       shift and go to state 97
   yacc.py:2714:    command                        shift and go to state 23
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 73
   yacc.py:2563:
   yacc.py:2565:    (13) command -> REPEAT commands UNTIL . condition SEMICOLON
   yacc.py:2565:    (37) condition -> . value EQ value
   yacc.py:2565:    (38) condition -> . value NEQ value
   yacc.py:2565:    (39) condition -> . value GT value
   yacc.py:2565:    (40) condition -> . value LT value
   yacc.py:2565:    (41) condition -> . value GEQ value
   yacc.py:2565:    (42) condition -> . value LEQ value
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    condition                      shift and go to state 98
   yacc.py:2714:    value                          shift and go to state 46
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 74
   yacc.py:2563:
   yacc.py:2565:    (14) command -> FOR PID FROM . value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> FOR PID FROM . value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    value                          shift and go to state 99
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 75
   yacc.py:2563:
   yacc.py:2565:    (46) identifier -> PID LBR PID . RBR
   yacc.py:2566:
   yacc.py:2687:    RBR             shift and go to state 100
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 76
   yacc.py:2563:
   yacc.py:2565:    (47) identifier -> PID LBR NUM . RBR
   yacc.py:2566:
   yacc.py:2687:    RBR             shift and go to state 101
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 77
   yacc.py:2563:
   yacc.py:2565:    (30) args -> PID .
   yacc.py:2566:
   yacc.py:2687:    RPAR            reduce using rule 30 (args -> PID .)
   yacc.py:2687:    PID             reduce using rule 30 (args -> PID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 78
   yacc.py:2563:
   yacc.py:2565:    (20) proc_call -> PID LPAR args . RPAR
   yacc.py:2565:    (29) args -> args . PID
   yacc.py:2566:
   yacc.py:2687:    RPAR            shift and go to state 103
   yacc.py:2687:    PID             shift and go to state 102
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 79
   yacc.py:2563:
   yacc.py:2565:    (17) command -> READ identifier SEMICOLON .
   yacc.py:2566:
   yacc.py:2687:    END             reduce using rule 17 (command -> READ identifier SEMICOLON .)
   yacc.py:2687:    IF              reduce using rule 17 (command -> READ identifier SEMICOLON .)
   yacc.py:2687:    WHILE           reduce using rule 17 (command -> READ identifier SEMICOLON .)
   yacc.py:2687:    REPEAT          reduce using rule 17 (command -> READ identifier SEMICOLON .)
   yacc.py:2687:    FOR             reduce using rule 17 (command -> READ identifier SEMICOLON .)
   yacc.py:2687:    READ            reduce using rule 17 (command -> READ identifier SEMICOLON .)
   yacc.py:2687:    WRITE           reduce using rule 17 (command -> READ identifier SEMICOLON .)
   yacc.py:2687:    PID             reduce using rule 17 (command -> READ identifier SEMICOLON .)
   yacc.py:2687:    UNTIL           reduce using rule 17 (command -> READ identifier SEMICOLON .)
   yacc.py:2687:    ELSE            reduce using rule 17 (command -> READ identifier SEMICOLON .)
   yacc.py:2687:    ENDIF           reduce using rule 17 (command -> READ identifier SEMICOLON .)
   yacc.py:2687:    ENDWHILE        reduce using rule 17 (command -> READ identifier SEMICOLON .)
   yacc.py:2687:    ENDFOR          reduce using rule 17 (command -> READ identifier SEMICOLON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 80
   yacc.py:2563:
   yacc.py:2565:    (18) command -> WRITE value SEMICOLON .
   yacc.py:2566:
   yacc.py:2687:    END             reduce using rule 18 (command -> WRITE value SEMICOLON .)
   yacc.py:2687:    IF              reduce using rule 18 (command -> WRITE value SEMICOLON .)
   yacc.py:2687:    WHILE           reduce using rule 18 (command -> WRITE value SEMICOLON .)
   yacc.py:2687:    REPEAT          reduce using rule 18 (command -> WRITE value SEMICOLON .)
   yacc.py:2687:    FOR             reduce using rule 18 (command -> WRITE value SEMICOLON .)
   yacc.py:2687:    READ            reduce using rule 18 (command -> WRITE value SEMICOLON .)
   yacc.py:2687:    WRITE           reduce using rule 18 (command -> WRITE value SEMICOLON .)
   yacc.py:2687:    PID             reduce using rule 18 (command -> WRITE value SEMICOLON .)
   yacc.py:2687:    UNTIL           reduce using rule 18 (command -> WRITE value SEMICOLON .)
   yacc.py:2687:    ELSE            reduce using rule 18 (command -> WRITE value SEMICOLON .)
   yacc.py:2687:    ENDIF           reduce using rule 18 (command -> WRITE value SEMICOLON .)
   yacc.py:2687:    ENDWHILE        reduce using rule 18 (command -> WRITE value SEMICOLON .)
   yacc.py:2687:    ENDFOR          reduce using rule 18 (command -> WRITE value SEMICOLON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 81
   yacc.py:2563:
   yacc.py:2565:    (24) declarations -> PID LBR NUM : . NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 104
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 82
   yacc.py:2563:
   yacc.py:2565:    (2) procedures -> procedures PROCEDURE proc_head IS declarations BEGIN commands END .
   yacc.py:2566:
   yacc.py:2687:    PROCEDURE       reduce using rule 2 (procedures -> procedures PROCEDURE proc_head IS declarations BEGIN commands END .)
   yacc.py:2687:    PROGRAM         reduce using rule 2 (procedures -> procedures PROCEDURE proc_head IS declarations BEGIN commands END .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 83
   yacc.py:2563:
   yacc.py:2565:    (22) declarations -> declarations COMMA PID LBR NUM . : NUM RBR
   yacc.py:2566:
   yacc.py:2687:    :               shift and go to state 105
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 84
   yacc.py:2563:
   yacc.py:2565:    (9) command -> identifier ASSIGN expression SEMICOLON .
   yacc.py:2566:
   yacc.py:2687:    END             reduce using rule 9 (command -> identifier ASSIGN expression SEMICOLON .)
   yacc.py:2687:    IF              reduce using rule 9 (command -> identifier ASSIGN expression SEMICOLON .)
   yacc.py:2687:    WHILE           reduce using rule 9 (command -> identifier ASSIGN expression SEMICOLON .)
   yacc.py:2687:    REPEAT          reduce using rule 9 (command -> identifier ASSIGN expression SEMICOLON .)
   yacc.py:2687:    FOR             reduce using rule 9 (command -> identifier ASSIGN expression SEMICOLON .)
   yacc.py:2687:    READ            reduce using rule 9 (command -> identifier ASSIGN expression SEMICOLON .)
   yacc.py:2687:    WRITE           reduce using rule 9 (command -> identifier ASSIGN expression SEMICOLON .)
   yacc.py:2687:    PID             reduce using rule 9 (command -> identifier ASSIGN expression SEMICOLON .)
   yacc.py:2687:    UNTIL           reduce using rule 9 (command -> identifier ASSIGN expression SEMICOLON .)
   yacc.py:2687:    ELSE            reduce using rule 9 (command -> identifier ASSIGN expression SEMICOLON .)
   yacc.py:2687:    ENDIF           reduce using rule 9 (command -> identifier ASSIGN expression SEMICOLON .)
   yacc.py:2687:    ENDWHILE        reduce using rule 9 (command -> identifier ASSIGN expression SEMICOLON .)
   yacc.py:2687:    ENDFOR          reduce using rule 9 (command -> identifier ASSIGN expression SEMICOLON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 85
   yacc.py:2563:
   yacc.py:2565:    (32) expression -> value ADD . value
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    value                          shift and go to state 106
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 86
   yacc.py:2563:
   yacc.py:2565:    (33) expression -> value SUB . value
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    value                          shift and go to state 107
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 87
   yacc.py:2563:
   yacc.py:2565:    (34) expression -> value MUL . value
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    value                          shift and go to state 108
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 88
   yacc.py:2563:
   yacc.py:2565:    (35) expression -> value DIV . value
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    value                          shift and go to state 109
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 89
   yacc.py:2563:
   yacc.py:2565:    (36) expression -> value MOD . value
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    value                          shift and go to state 110
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 90
   yacc.py:2563:
   yacc.py:2565:    (10) command -> IF condition THEN commands . ELSE commands ENDIF
   yacc.py:2565:    (11) command -> IF condition THEN commands . ENDIF
   yacc.py:2565:    (7) commands -> commands . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    ELSE            shift and go to state 111
   yacc.py:2687:    ENDIF           shift and go to state 112
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    command                        shift and go to state 43
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 91
   yacc.py:2563:
   yacc.py:2565:    (37) condition -> value EQ value .
   yacc.py:2566:
   yacc.py:2687:    THEN            reduce using rule 37 (condition -> value EQ value .)
   yacc.py:2687:    DO              reduce using rule 37 (condition -> value EQ value .)
   yacc.py:2687:    SEMICOLON       reduce using rule 37 (condition -> value EQ value .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 92
   yacc.py:2563:
   yacc.py:2565:    (38) condition -> value NEQ value .
   yacc.py:2566:
   yacc.py:2687:    THEN            reduce using rule 38 (condition -> value NEQ value .)
   yacc.py:2687:    DO              reduce using rule 38 (condition -> value NEQ value .)
   yacc.py:2687:    SEMICOLON       reduce using rule 38 (condition -> value NEQ value .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 93
   yacc.py:2563:
   yacc.py:2565:    (39) condition -> value GT value .
   yacc.py:2566:
   yacc.py:2687:    THEN            reduce using rule 39 (condition -> value GT value .)
   yacc.py:2687:    DO              reduce using rule 39 (condition -> value GT value .)
   yacc.py:2687:    SEMICOLON       reduce using rule 39 (condition -> value GT value .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 94
   yacc.py:2563:
   yacc.py:2565:    (40) condition -> value LT value .
   yacc.py:2566:
   yacc.py:2687:    THEN            reduce using rule 40 (condition -> value LT value .)
   yacc.py:2687:    DO              reduce using rule 40 (condition -> value LT value .)
   yacc.py:2687:    SEMICOLON       reduce using rule 40 (condition -> value LT value .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 95
   yacc.py:2563:
   yacc.py:2565:    (41) condition -> value GEQ value .
   yacc.py:2566:
   yacc.py:2687:    THEN            reduce using rule 41 (condition -> value GEQ value .)
   yacc.py:2687:    DO              reduce using rule 41 (condition -> value GEQ value .)
   yacc.py:2687:    SEMICOLON       reduce using rule 41 (condition -> value GEQ value .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 96
   yacc.py:2563:
   yacc.py:2565:    (42) condition -> value LEQ value .
   yacc.py:2566:
   yacc.py:2687:    THEN            reduce using rule 42 (condition -> value LEQ value .)
   yacc.py:2687:    DO              reduce using rule 42 (condition -> value LEQ value .)
   yacc.py:2687:    SEMICOLON       reduce using rule 42 (condition -> value LEQ value .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 97
   yacc.py:2563:
   yacc.py:2565:    (12) command -> WHILE condition DO commands . ENDWHILE
   yacc.py:2565:    (7) commands -> commands . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    ENDWHILE        shift and go to state 113
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    command                        shift and go to state 43
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 98
   yacc.py:2563:
   yacc.py:2565:    (13) command -> REPEAT commands UNTIL condition . SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       shift and go to state 114
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 99
   yacc.py:2563:
   yacc.py:2565:    (14) command -> FOR PID FROM value . TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> FOR PID FROM value . DOWNTO value DO commands ENDFOR
   yacc.py:2566:
   yacc.py:2687:    TO              shift and go to state 115
   yacc.py:2687:    DOWNTO          shift and go to state 116
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 100
   yacc.py:2563:
   yacc.py:2565:    (46) identifier -> PID LBR PID RBR .
   yacc.py:2566:
   yacc.py:2687:    ASSIGN          reduce using rule 46 (identifier -> PID LBR PID RBR .)
   yacc.py:2687:    EQ              reduce using rule 46 (identifier -> PID LBR PID RBR .)
   yacc.py:2687:    NEQ             reduce using rule 46 (identifier -> PID LBR PID RBR .)
   yacc.py:2687:    GT              reduce using rule 46 (identifier -> PID LBR PID RBR .)
   yacc.py:2687:    LT              reduce using rule 46 (identifier -> PID LBR PID RBR .)
   yacc.py:2687:    GEQ             reduce using rule 46 (identifier -> PID LBR PID RBR .)
   yacc.py:2687:    LEQ             reduce using rule 46 (identifier -> PID LBR PID RBR .)
   yacc.py:2687:    SEMICOLON       reduce using rule 46 (identifier -> PID LBR PID RBR .)
   yacc.py:2687:    ADD             reduce using rule 46 (identifier -> PID LBR PID RBR .)
   yacc.py:2687:    SUB             reduce using rule 46 (identifier -> PID LBR PID RBR .)
   yacc.py:2687:    MUL             reduce using rule 46 (identifier -> PID LBR PID RBR .)
   yacc.py:2687:    DIV             reduce using rule 46 (identifier -> PID LBR PID RBR .)
   yacc.py:2687:    MOD             reduce using rule 46 (identifier -> PID LBR PID RBR .)
   yacc.py:2687:    THEN            reduce using rule 46 (identifier -> PID LBR PID RBR .)
   yacc.py:2687:    DO              reduce using rule 46 (identifier -> PID LBR PID RBR .)
   yacc.py:2687:    TO              reduce using rule 46 (identifier -> PID LBR PID RBR .)
   yacc.py:2687:    DOWNTO          reduce using rule 46 (identifier -> PID LBR PID RBR .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 101
   yacc.py:2563:
   yacc.py:2565:    (47) identifier -> PID LBR NUM RBR .
   yacc.py:2566:
   yacc.py:2687:    ASSIGN          reduce using rule 47 (identifier -> PID LBR NUM RBR .)
   yacc.py:2687:    EQ              reduce using rule 47 (identifier -> PID LBR NUM RBR .)
   yacc.py:2687:    NEQ             reduce using rule 47 (identifier -> PID LBR NUM RBR .)
   yacc.py:2687:    GT              reduce using rule 47 (identifier -> PID LBR NUM RBR .)
   yacc.py:2687:    LT              reduce using rule 47 (identifier -> PID LBR NUM RBR .)
   yacc.py:2687:    GEQ             reduce using rule 47 (identifier -> PID LBR NUM RBR .)
   yacc.py:2687:    LEQ             reduce using rule 47 (identifier -> PID LBR NUM RBR .)
   yacc.py:2687:    SEMICOLON       reduce using rule 47 (identifier -> PID LBR NUM RBR .)
   yacc.py:2687:    ADD             reduce using rule 47 (identifier -> PID LBR NUM RBR .)
   yacc.py:2687:    SUB             reduce using rule 47 (identifier -> PID LBR NUM RBR .)
   yacc.py:2687:    MUL             reduce using rule 47 (identifier -> PID LBR NUM RBR .)
   yacc.py:2687:    DIV             reduce using rule 47 (identifier -> PID LBR NUM RBR .)
   yacc.py:2687:    MOD             reduce using rule 47 (identifier -> PID LBR NUM RBR .)
   yacc.py:2687:    THEN            reduce using rule 47 (identifier -> PID LBR NUM RBR .)
   yacc.py:2687:    DO              reduce using rule 47 (identifier -> PID LBR NUM RBR .)
   yacc.py:2687:    TO              reduce using rule 47 (identifier -> PID LBR NUM RBR .)
   yacc.py:2687:    DOWNTO          reduce using rule 47 (identifier -> PID LBR NUM RBR .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 102
   yacc.py:2563:
   yacc.py:2565:    (29) args -> args PID .
   yacc.py:2566:
   yacc.py:2687:    RPAR            reduce using rule 29 (args -> args PID .)
   yacc.py:2687:    PID             reduce using rule 29 (args -> args PID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 103
   yacc.py:2563:
   yacc.py:2565:    (20) proc_call -> PID LPAR args RPAR .
   yacc.py:2566:
   yacc.py:2687:    END             reduce using rule 20 (proc_call -> PID LPAR args RPAR .)
   yacc.py:2687:    IF              reduce using rule 20 (proc_call -> PID LPAR args RPAR .)
   yacc.py:2687:    WHILE           reduce using rule 20 (proc_call -> PID LPAR args RPAR .)
   yacc.py:2687:    REPEAT          reduce using rule 20 (proc_call -> PID LPAR args RPAR .)
   yacc.py:2687:    FOR             reduce using rule 20 (proc_call -> PID LPAR args RPAR .)
   yacc.py:2687:    READ            reduce using rule 20 (proc_call -> PID LPAR args RPAR .)
   yacc.py:2687:    WRITE           reduce using rule 20 (proc_call -> PID LPAR args RPAR .)
   yacc.py:2687:    PID             reduce using rule 20 (proc_call -> PID LPAR args RPAR .)
   yacc.py:2687:    UNTIL           reduce using rule 20 (proc_call -> PID LPAR args RPAR .)
   yacc.py:2687:    ELSE            reduce using rule 20 (proc_call -> PID LPAR args RPAR .)
   yacc.py:2687:    ENDIF           reduce using rule 20 (proc_call -> PID LPAR args RPAR .)
   yacc.py:2687:    ENDWHILE        reduce using rule 20 (proc_call -> PID LPAR args RPAR .)
   yacc.py:2687:    ENDFOR          reduce using rule 20 (proc_call -> PID LPAR args RPAR .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 104
   yacc.py:2563:
   yacc.py:2565:    (24) declarations -> PID LBR NUM : NUM . RBR
   yacc.py:2566:
   yacc.py:2687:    RBR             shift and go to state 117
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 105
   yacc.py:2563:
   yacc.py:2565:    (22) declarations -> declarations COMMA PID LBR NUM : . NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 118
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 106
   yacc.py:2563:
   yacc.py:2565:    (32) expression -> value ADD value .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 32 (expression -> value ADD value .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 107
   yacc.py:2563:
   yacc.py:2565:    (33) expression -> value SUB value .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 33 (expression -> value SUB value .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 108
   yacc.py:2563:
   yacc.py:2565:    (34) expression -> value MUL value .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 34 (expression -> value MUL value .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 109
   yacc.py:2563:
   yacc.py:2565:    (35) expression -> value DIV value .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 35 (expression -> value DIV value .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 110
   yacc.py:2563:
   yacc.py:2565:    (36) expression -> value MOD value .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 36 (expression -> value MOD value .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 111
   yacc.py:2563:
   yacc.py:2565:    (10) command -> IF condition THEN commands ELSE . commands ENDIF
   yacc.py:2565:    (7) commands -> . commands command
   yacc.py:2565:    (8) commands -> . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    commands                       shift and go to state 119
   yacc.py:2714:    command                        shift and go to state 23
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 112
   yacc.py:2563:
   yacc.py:2565:    (11) command -> IF condition THEN commands ENDIF .
   yacc.py:2566:
   yacc.py:2687:    END             reduce using rule 11 (command -> IF condition THEN commands ENDIF .)
   yacc.py:2687:    IF              reduce using rule 11 (command -> IF condition THEN commands ENDIF .)
   yacc.py:2687:    WHILE           reduce using rule 11 (command -> IF condition THEN commands ENDIF .)
   yacc.py:2687:    REPEAT          reduce using rule 11 (command -> IF condition THEN commands ENDIF .)
   yacc.py:2687:    FOR             reduce using rule 11 (command -> IF condition THEN commands ENDIF .)
   yacc.py:2687:    READ            reduce using rule 11 (command -> IF condition THEN commands ENDIF .)
   yacc.py:2687:    WRITE           reduce using rule 11 (command -> IF condition THEN commands ENDIF .)
   yacc.py:2687:    PID             reduce using rule 11 (command -> IF condition THEN commands ENDIF .)
   yacc.py:2687:    UNTIL           reduce using rule 11 (command -> IF condition THEN commands ENDIF .)
   yacc.py:2687:    ELSE            reduce using rule 11 (command -> IF condition THEN commands ENDIF .)
   yacc.py:2687:    ENDIF           reduce using rule 11 (command -> IF condition THEN commands ENDIF .)
   yacc.py:2687:    ENDWHILE        reduce using rule 11 (command -> IF condition THEN commands ENDIF .)
   yacc.py:2687:    ENDFOR          reduce using rule 11 (command -> IF condition THEN commands ENDIF .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 113
   yacc.py:2563:
   yacc.py:2565:    (12) command -> WHILE condition DO commands ENDWHILE .
   yacc.py:2566:
   yacc.py:2687:    END             reduce using rule 12 (command -> WHILE condition DO commands ENDWHILE .)
   yacc.py:2687:    IF              reduce using rule 12 (command -> WHILE condition DO commands ENDWHILE .)
   yacc.py:2687:    WHILE           reduce using rule 12 (command -> WHILE condition DO commands ENDWHILE .)
   yacc.py:2687:    REPEAT          reduce using rule 12 (command -> WHILE condition DO commands ENDWHILE .)
   yacc.py:2687:    FOR             reduce using rule 12 (command -> WHILE condition DO commands ENDWHILE .)
   yacc.py:2687:    READ            reduce using rule 12 (command -> WHILE condition DO commands ENDWHILE .)
   yacc.py:2687:    WRITE           reduce using rule 12 (command -> WHILE condition DO commands ENDWHILE .)
   yacc.py:2687:    PID             reduce using rule 12 (command -> WHILE condition DO commands ENDWHILE .)
   yacc.py:2687:    UNTIL           reduce using rule 12 (command -> WHILE condition DO commands ENDWHILE .)
   yacc.py:2687:    ELSE            reduce using rule 12 (command -> WHILE condition DO commands ENDWHILE .)
   yacc.py:2687:    ENDIF           reduce using rule 12 (command -> WHILE condition DO commands ENDWHILE .)
   yacc.py:2687:    ENDWHILE        reduce using rule 12 (command -> WHILE condition DO commands ENDWHILE .)
   yacc.py:2687:    ENDFOR          reduce using rule 12 (command -> WHILE condition DO commands ENDWHILE .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 114
   yacc.py:2563:
   yacc.py:2565:    (13) command -> REPEAT commands UNTIL condition SEMICOLON .
   yacc.py:2566:
   yacc.py:2687:    END             reduce using rule 13 (command -> REPEAT commands UNTIL condition SEMICOLON .)
   yacc.py:2687:    IF              reduce using rule 13 (command -> REPEAT commands UNTIL condition SEMICOLON .)
   yacc.py:2687:    WHILE           reduce using rule 13 (command -> REPEAT commands UNTIL condition SEMICOLON .)
   yacc.py:2687:    REPEAT          reduce using rule 13 (command -> REPEAT commands UNTIL condition SEMICOLON .)
   yacc.py:2687:    FOR             reduce using rule 13 (command -> REPEAT commands UNTIL condition SEMICOLON .)
   yacc.py:2687:    READ            reduce using rule 13 (command -> REPEAT commands UNTIL condition SEMICOLON .)
   yacc.py:2687:    WRITE           reduce using rule 13 (command -> REPEAT commands UNTIL condition SEMICOLON .)
   yacc.py:2687:    PID             reduce using rule 13 (command -> REPEAT commands UNTIL condition SEMICOLON .)
   yacc.py:2687:    UNTIL           reduce using rule 13 (command -> REPEAT commands UNTIL condition SEMICOLON .)
   yacc.py:2687:    ELSE            reduce using rule 13 (command -> REPEAT commands UNTIL condition SEMICOLON .)
   yacc.py:2687:    ENDIF           reduce using rule 13 (command -> REPEAT commands UNTIL condition SEMICOLON .)
   yacc.py:2687:    ENDWHILE        reduce using rule 13 (command -> REPEAT commands UNTIL condition SEMICOLON .)
   yacc.py:2687:    ENDFOR          reduce using rule 13 (command -> REPEAT commands UNTIL condition SEMICOLON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 115
   yacc.py:2563:
   yacc.py:2565:    (14) command -> FOR PID FROM value TO . value DO commands ENDFOR
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    value                          shift and go to state 120
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 116
   yacc.py:2563:
   yacc.py:2565:    (15) command -> FOR PID FROM value DOWNTO . value DO commands ENDFOR
   yacc.py:2565:    (43) value -> . NUM
   yacc.py:2565:    (44) value -> . identifier
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2566:
   yacc.py:2687:    NUM             shift and go to state 47
   yacc.py:2687:    PID             shift and go to state 49
   yacc.py:2689:
   yacc.py:2714:    value                          shift and go to state 121
   yacc.py:2714:    identifier                     shift and go to state 48
   yacc.py:2561:
   yacc.py:2562:state 117
   yacc.py:2563:
   yacc.py:2565:    (24) declarations -> PID LBR NUM : NUM RBR .
   yacc.py:2566:
   yacc.py:2687:    BEGIN           reduce using rule 24 (declarations -> PID LBR NUM : NUM RBR .)
   yacc.py:2687:    COMMA           reduce using rule 24 (declarations -> PID LBR NUM : NUM RBR .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 118
   yacc.py:2563:
   yacc.py:2565:    (22) declarations -> declarations COMMA PID LBR NUM : NUM . RBR
   yacc.py:2566:
   yacc.py:2687:    RBR             shift and go to state 122
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 119
   yacc.py:2563:
   yacc.py:2565:    (10) command -> IF condition THEN commands ELSE commands . ENDIF
   yacc.py:2565:    (7) commands -> commands . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    ENDIF           shift and go to state 123
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    command                        shift and go to state 43
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 120
   yacc.py:2563:
   yacc.py:2565:    (14) command -> FOR PID FROM value TO value . DO commands ENDFOR
   yacc.py:2566:
   yacc.py:2687:    DO              shift and go to state 124
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 121
   yacc.py:2563:
   yacc.py:2565:    (15) command -> FOR PID FROM value DOWNTO value . DO commands ENDFOR
   yacc.py:2566:
   yacc.py:2687:    DO              shift and go to state 125
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 122
   yacc.py:2563:
   yacc.py:2565:    (22) declarations -> declarations COMMA PID LBR NUM : NUM RBR .
   yacc.py:2566:
   yacc.py:2687:    BEGIN           reduce using rule 22 (declarations -> declarations COMMA PID LBR NUM : NUM RBR .)
   yacc.py:2687:    COMMA           reduce using rule 22 (declarations -> declarations COMMA PID LBR NUM : NUM RBR .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 123
   yacc.py:2563:
   yacc.py:2565:    (10) command -> IF condition THEN commands ELSE commands ENDIF .
   yacc.py:2566:
   yacc.py:2687:    END             reduce using rule 10 (command -> IF condition THEN commands ELSE commands ENDIF .)
   yacc.py:2687:    IF              reduce using rule 10 (command -> IF condition THEN commands ELSE commands ENDIF .)
   yacc.py:2687:    WHILE           reduce using rule 10 (command -> IF condition THEN commands ELSE commands ENDIF .)
   yacc.py:2687:    REPEAT          reduce using rule 10 (command -> IF condition THEN commands ELSE commands ENDIF .)
   yacc.py:2687:    FOR             reduce using rule 10 (command -> IF condition THEN commands ELSE commands ENDIF .)
   yacc.py:2687:    READ            reduce using rule 10 (command -> IF condition THEN commands ELSE commands ENDIF .)
   yacc.py:2687:    WRITE           reduce using rule 10 (command -> IF condition THEN commands ELSE commands ENDIF .)
   yacc.py:2687:    PID             reduce using rule 10 (command -> IF condition THEN commands ELSE commands ENDIF .)
   yacc.py:2687:    UNTIL           reduce using rule 10 (command -> IF condition THEN commands ELSE commands ENDIF .)
   yacc.py:2687:    ELSE            reduce using rule 10 (command -> IF condition THEN commands ELSE commands ENDIF .)
   yacc.py:2687:    ENDIF           reduce using rule 10 (command -> IF condition THEN commands ELSE commands ENDIF .)
   yacc.py:2687:    ENDWHILE        reduce using rule 10 (command -> IF condition THEN commands ELSE commands ENDIF .)
   yacc.py:2687:    ENDFOR          reduce using rule 10 (command -> IF condition THEN commands ELSE commands ENDIF .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 124
   yacc.py:2563:
   yacc.py:2565:    (14) command -> FOR PID FROM value TO value DO . commands ENDFOR
   yacc.py:2565:    (7) commands -> . commands command
   yacc.py:2565:    (8) commands -> . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    commands                       shift and go to state 126
   yacc.py:2714:    command                        shift and go to state 23
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 125
   yacc.py:2563:
   yacc.py:2565:    (15) command -> FOR PID FROM value DOWNTO value DO . commands ENDFOR
   yacc.py:2565:    (7) commands -> . commands command
   yacc.py:2565:    (8) commands -> . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    commands                       shift and go to state 127
   yacc.py:2714:    command                        shift and go to state 23
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 126
   yacc.py:2563:
   yacc.py:2565:    (14) command -> FOR PID FROM value TO value DO commands . ENDFOR
   yacc.py:2565:    (7) commands -> commands . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    ENDFOR          shift and go to state 128
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    command                        shift and go to state 43
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 127
   yacc.py:2563:
   yacc.py:2565:    (15) command -> FOR PID FROM value DOWNTO value DO commands . ENDFOR
   yacc.py:2565:    (7) commands -> commands . command
   yacc.py:2565:    (9) command -> . identifier ASSIGN expression SEMICOLON
   yacc.py:2565:    (10) command -> . IF condition THEN commands ELSE commands ENDIF
   yacc.py:2565:    (11) command -> . IF condition THEN commands ENDIF
   yacc.py:2565:    (12) command -> . WHILE condition DO commands ENDWHILE
   yacc.py:2565:    (13) command -> . REPEAT commands UNTIL condition SEMICOLON
   yacc.py:2565:    (14) command -> . FOR PID FROM value TO value DO commands ENDFOR
   yacc.py:2565:    (15) command -> . FOR PID FROM value DOWNTO value DO commands ENDFOR
   yacc.py:2565:    (16) command -> . proc_call
   yacc.py:2565:    (17) command -> . READ identifier SEMICOLON
   yacc.py:2565:    (18) command -> . WRITE value SEMICOLON
   yacc.py:2565:    (45) identifier -> . PID
   yacc.py:2565:    (46) identifier -> . PID LBR PID RBR
   yacc.py:2565:    (47) identifier -> . PID LBR NUM RBR
   yacc.py:2565:    (20) proc_call -> . PID LPAR args RPAR
   yacc.py:2566:
   yacc.py:2687:    ENDFOR          shift and go to state 129
   yacc.py:2687:    IF              shift and go to state 25
   yacc.py:2687:    WHILE           shift and go to state 26
   yacc.py:2687:    REPEAT          shift and go to state 27
   yacc.py:2687:    FOR             shift and go to state 28
   yacc.py:2687:    READ            shift and go to state 31
   yacc.py:2687:    WRITE           shift and go to state 32
   yacc.py:2687:    PID             shift and go to state 29
   yacc.py:2689:
   yacc.py:2714:    command                        shift and go to state 43
   yacc.py:2714:    identifier                     shift and go to state 24
   yacc.py:2714:    proc_call                      shift and go to state 30
   yacc.py:2561:
   yacc.py:2562:state 128
   yacc.py:2563:
   yacc.py:2565:    (14) command -> FOR PID FROM value TO value DO commands ENDFOR .
   yacc.py:2566:
   yacc.py:2687:    END             reduce using rule 14 (command -> FOR PID FROM value TO value DO commands ENDFOR .)
   yacc.py:2687:    IF              reduce using rule 14 (command -> FOR PID FROM value TO value DO commands ENDFOR .)
   yacc.py:2687:    WHILE           reduce using rule 14 (command -> FOR PID FROM value TO value DO commands ENDFOR .)
   yacc.py:2687:    REPEAT          reduce using rule 14 (command -> FOR PID FROM value TO value DO commands ENDFOR .)
   yacc.py:2687:    FOR             reduce using rule 14 (command -> FOR PID FROM value TO value DO commands ENDFOR .)
   yacc.py:2687:    READ            reduce using rule 14 (command -> FOR PID FROM value TO value DO commands ENDFOR .)
   yacc.py:2687:    WRITE           reduce using rule 14 (command -> FOR PID FROM value TO value DO commands ENDFOR .)
   yacc.py:2687:    PID             reduce using rule 14 (command -> FOR PID FROM value TO value DO commands ENDFOR .)
   yacc.py:2687:    UNTIL           reduce using rule 14 (command -> FOR PID FROM value TO value DO commands ENDFOR .)
   yacc.py:2687:    ELSE            reduce using rule 14 (command -> FOR PID FROM value TO value DO commands ENDFOR .)
   yacc.py:2687:    ENDIF           reduce using rule 14 (command -> FOR PID FROM value TO value DO commands ENDFOR .)
   yacc.py:2687:    ENDWHILE        reduce using rule 14 (command -> FOR PID FROM value TO value DO commands ENDFOR .)
   yacc.py:2687:    ENDFOR          reduce using rule 14 (command -> FOR PID FROM value TO value DO commands ENDFOR .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 129
   yacc.py:2563:
   yacc.py:2565:    (15) command -> FOR PID FROM value DOWNTO value DO commands ENDFOR .
   yacc.py:2566:
   yacc.py:2687:    END             reduce using rule 15 (command -> FOR PID FROM value DOWNTO value DO commands ENDFOR .)
   yacc.py:2687:    IF              reduce using rule 15 (command -> FOR PID FROM value DOWNTO value DO commands ENDFOR .)
   yacc.py:2687:    WHILE           reduce using rule 15 (command -> FOR PID FROM value DOWNTO value DO commands ENDFOR .)
   yacc.py:2687:    REPEAT          reduce using rule 15 (command -> FOR PID FROM value DOWNTO value DO commands ENDFOR .)
   yacc.py:2687:    FOR             reduce using rule 15 (command -> FOR PID FROM value DOWNTO value DO commands ENDFOR .)
   yacc.py:2687:    READ            reduce using rule 15 (command -> FOR PID FROM value DOWNTO value DO commands ENDFOR .)
   yacc.py:2687:    WRITE           reduce using rule 15 (command -> FOR PID FROM value DOWNTO value DO commands ENDFOR .)
   yacc.py:2687:    PID             reduce using rule 15 (command -> FOR PID FROM value DOWNTO value DO commands ENDFOR .)
   yacc.py:2687:    UNTIL           reduce using rule 15 (command -> FOR PID FROM value DOWNTO value DO commands ENDFOR .)
   yacc.py:2687:    ELSE            reduce using rule 15 (command -> FOR PID FROM value DOWNTO value DO commands ENDFOR .)
   yacc.py:2687:    ENDIF           reduce using rule 15 (command -> FOR PID FROM value DOWNTO value DO commands ENDFOR .)
   yacc.py:2687:    ENDWHILE        reduce using rule 15 (command -> FOR PID FROM value DOWNTO value DO commands ENDFOR .)
   yacc.py:2687:    ENDFOR          reduce using rule 15 (command -> FOR PID FROM value DOWNTO value DO commands ENDFOR .)
   yacc.py:2689:
   yacc.py: 362:PLY: PARSE DEBUG START
   yacc.py: 410:
   yacc.py: 411:State  : 0
   yacc.py: 434:Stack  : . LexToken(PROGRAM,'PROGRAM',2,1)
   yacc.py: 473:Action : Reduce rule [empty -> <empty>] with [] and goto state 3
   yacc.py: 548:Result : <NoneType @ 0xa3f8a0> (None)
   yacc.py: 410:
   yacc.py: 411:State  : 3
   yacc.py: 434:Stack  : empty . LexToken(PROGRAM,'PROGRAM',2,1)
   yacc.py: 469:Action : Reduce rule [procedures -> empty] with [None] and goto state 2
   yacc.py: 506:Result : <Procedures @ 0x7e4d2819d700> (<nodes.Procedures object at 0x7e4d2819d7 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 2
   yacc.py: 434:Stack  : procedures . LexToken(PROGRAM,'PROGRAM',2,1)
   yacc.py: 445:Action : Shift and goto state 6
   yacc.py: 410:
   yacc.py: 411:State  : 6
   yacc.py: 434:Stack  : procedures PROGRAM . LexToken(IS,'IS',2,9)
   yacc.py: 445:Action : Shift and goto state 9
   yacc.py: 410:
   yacc.py: 411:State  : 9
   yacc.py: 434:Stack  : procedures PROGRAM IS . LexToken(PID,'n',3,13)
   yacc.py: 445:Action : Shift and goto state 14
   yacc.py: 410:
   yacc.py: 411:State  : 14
   yacc.py: 434:Stack  : procedures PROGRAM IS PID . LexToken(COMMA,',',3,14)
   yacc.py: 469:Action : Reduce rule [declarations -> PID] with ['n'] and goto state 12
   yacc.py: 506:Result : <Declarations @ 0x7e4d27779970> (<nodes.Declarations object at 0x7e4d2777 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 12
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations . LexToken(COMMA,',',3,14)
   yacc.py: 445:Action : Shift and goto state 21
   yacc.py: 410:
   yacc.py: 411:State  : 21
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations COMMA . LexToken(PID,'p',3,16)
   yacc.py: 445:Action : Shift and goto state 41
   yacc.py: 410:
   yacc.py: 411:State  : 41
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations COMMA PID . LexToken(BEGIN,'BEGIN',4,18)
   yacc.py: 469:Action : Reduce rule [declarations -> declarations COMMA PID] with [<Declarations @ 0x7e4d27779970>,',','p'] and goto state 12
   yacc.py: 506:Result : <Declarations @ 0x7e4d27779970> (<nodes.Declarations object at 0x7e4d2777 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 12
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations . LexToken(BEGIN,'BEGIN',4,18)
   yacc.py: 445:Action : Shift and goto state 20
   yacc.py: 410:
   yacc.py: 411:State  : 20
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN . LexToken(READ,'READ',5,28)
   yacc.py: 445:Action : Shift and goto state 31
   yacc.py: 410:
   yacc.py: 411:State  : 31
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN READ . LexToken(PID,'n',5,33)
   yacc.py: 445:Action : Shift and goto state 49
   yacc.py: 410:
   yacc.py: 411:State  : 49
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN READ PID . LexToken(SEMICOLON,';',5,34)
   yacc.py: 469:Action : Reduce rule [identifier -> PID] with ['n'] and goto state 55
   yacc.py: 506:Result : <Identifier @ 0x7e4d2862f9e0> (<nodes.Identifier object at 0x7e4d2862f9 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 55
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN READ identifier . LexToken(SEMICOLON,';',5,34)
   yacc.py: 445:Action : Shift and goto state 79
   yacc.py: 410:
   yacc.py: 411:State  : 79
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN READ identifier SEMICOLON . LexToken(REPEAT,'REPEAT',6,40)
   yacc.py: 469:Action : Reduce rule [command -> READ identifier SEMICOLON] with ['READ',<Identifier @ 0x7e4d2862f9e0>,';'] and goto state 23
   yacc.py: 506:Result : <Identifier @ 0x7e4d2862f9e0> (<nodes.Identifier object at 0x7e4d2862f9 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 23
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN command . LexToken(REPEAT,'REPEAT',6,40)
   yacc.py: 469:Action : Reduce rule [commands -> command] with [<Identifier @ 0x7e4d2862f9e0>] and goto state 40
   yacc.py: 506:Result : <Commands @ 0x7e4d287aecc0> (<nodes.Commands object at 0x7e4d287aecc0 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 40
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands . LexToken(REPEAT,'REPEAT',6,40)
   yacc.py: 445:Action : Shift and goto state 27
   yacc.py: 410:
   yacc.py: 411:State  : 27
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT . LexToken(PID,'p',7,48)
   yacc.py: 445:Action : Shift and goto state 29
   yacc.py: 410:
   yacc.py: 411:State  : 29
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT PID . LexToken(ASSIGN,':=',7,49)
   yacc.py: 469:Action : Reduce rule [identifier -> PID] with ['p'] and goto state 24
   yacc.py: 506:Result : <Identifier @ 0x7e4d280778c0> (<nodes.Identifier object at 0x7e4d280778 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 24
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT identifier . LexToken(ASSIGN,':=',7,49)
   yacc.py: 445:Action : Shift and goto state 44
   yacc.py: 410:
   yacc.py: 411:State  : 44
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT identifier ASSIGN . LexToken(PID,'n',7,51)
   yacc.py: 445:Action : Shift and goto state 49
   yacc.py: 410:
   yacc.py: 411:State  : 49
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT identifier ASSIGN PID . LexToken(DIV,'/',7,52)
   yacc.py: 469:Action : Reduce rule [identifier -> PID] with ['n'] and goto state 48
   yacc.py: 506:Result : <Identifier @ 0x7e4d27779a00> (<nodes.Identifier object at 0x7e4d27779a ...)
   yacc.py: 410:
   yacc.py: 411:State  : 48
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT identifier ASSIGN identifier . LexToken(DIV,'/',7,52)
   yacc.py: 469:Action : Reduce rule [value -> identifier] with [<Identifier @ 0x7e4d27779a00>] and goto state 64
   yacc.py: 506:Result : <Identifier @ 0x7e4d27779a00> (<nodes.Identifier object at 0x7e4d27779a ...)
   yacc.py: 410:
   yacc.py: 411:State  : 64
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT identifier ASSIGN value . LexToken(DIV,'/',7,52)
   yacc.py: 445:Action : Shift and goto state 88
   yacc.py: 410:
   yacc.py: 411:State  : 88
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT identifier ASSIGN value DIV . LexToken(NUM,2,7,53)
   yacc.py: 445:Action : Shift and goto state 47
   yacc.py: 410:
   yacc.py: 411:State  : 47
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT identifier ASSIGN value DIV NUM . LexToken(SEMICOLON,';',7,54)
   yacc.py: 469:Action : Reduce rule [value -> NUM] with [2] and goto state 109
   yacc.py: 506:Result : <int @ 0xb359c8> (2)
   yacc.py: 410:
   yacc.py: 411:State  : 109
   yacc.py: 430:Defaulted state 109: Reduce using 35
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT identifier ASSIGN value DIV value . LexToken(SEMICOLON,';',7,54)
   yacc.py: 469:Action : Reduce rule [expression -> value DIV value] with [<Identifier @ 0x7e4d27779a00>,'/',2] and goto state 63
   yacc.py: 506:Result : <Expression @ 0x7e4d27779ee0> (<nodes.Expression object at 0x7e4d27779e ...)
   yacc.py: 410:
   yacc.py: 411:State  : 63
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT identifier ASSIGN expression . LexToken(SEMICOLON,';',7,54)
   yacc.py: 445:Action : Shift and goto state 84
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT identifier ASSIGN expression SEMICOLON . LexToken(PID,'p',8,57)
   yacc.py: 469:Action : Reduce rule [command -> identifier ASSIGN expression SEMICOLON] with [<Identifier @ 0x7e4d280778c0>,':=',<Expression @ 0x7e4d27779ee0>,';'] and goto state 23
   yacc.py: 506:Result : <Assign @ 0x7e4d2834bc80> (<nodes.Assign object at 0x7e4d2834bc80>)
   yacc.py: 410:
   yacc.py: 411:State  : 23
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT command . LexToken(PID,'p',8,57)
   yacc.py: 469:Action : Reduce rule [commands -> command] with [<Assign @ 0x7e4d2834bc80>] and goto state 51
   yacc.py: 506:Result : <Commands @ 0x7e4d27779e80> (<nodes.Commands object at 0x7e4d27779e80 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 51
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands . LexToken(PID,'p',8,57)
   yacc.py: 445:Action : Shift and goto state 29
   yacc.py: 410:
   yacc.py: 411:State  : 29
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands PID . LexToken(ASSIGN,':=',8,58)
   yacc.py: 469:Action : Reduce rule [identifier -> PID] with ['p'] and goto state 24
   yacc.py: 506:Result : <Identifier @ 0x7e4d29022300> (<nodes.Identifier object at 0x7e4d290223 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 24
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier . LexToken(ASSIGN,':=',8,58)
   yacc.py: 445:Action : Shift and goto state 44
   yacc.py: 410:
   yacc.py: 411:State  : 44
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN . LexToken(NUM,2,8,60)
   yacc.py: 445:Action : Shift and goto state 47
   yacc.py: 410:
   yacc.py: 411:State  : 47
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN NUM . LexToken(MUL,'*',8,61)
   yacc.py: 469:Action : Reduce rule [value -> NUM] with [2] and goto state 64
   yacc.py: 506:Result : <int @ 0xb359c8> (2)
   yacc.py: 410:
   yacc.py: 411:State  : 64
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN value . LexToken(MUL,'*',8,61)
   yacc.py: 445:Action : Shift and goto state 87
   yacc.py: 410:
   yacc.py: 411:State  : 87
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN value MUL . LexToken(PID,'p',8,62)
   yacc.py: 445:Action : Shift and goto state 49
   yacc.py: 410:
   yacc.py: 411:State  : 49
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN value MUL PID . LexToken(SEMICOLON,';',8,63)
   yacc.py: 469:Action : Reduce rule [identifier -> PID] with ['p'] and goto state 48
   yacc.py: 506:Result : <Identifier @ 0x7e4d283209e0> (<nodes.Identifier object at 0x7e4d283209 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 48
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN value MUL identifier . LexToken(SEMICOLON,';',8,63)
   yacc.py: 469:Action : Reduce rule [value -> identifier] with [<Identifier @ 0x7e4d283209e0>] and goto state 108
   yacc.py: 506:Result : <Identifier @ 0x7e4d283209e0> (<nodes.Identifier object at 0x7e4d283209 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 108
   yacc.py: 430:Defaulted state 108: Reduce using 34
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN value MUL value . LexToken(SEMICOLON,';',8,63)
   yacc.py: 469:Action : Reduce rule [expression -> value MUL value] with [2,'*',<Identifier @ 0x7e4d283209e0>] and goto state 63
   yacc.py: 506:Result : <Expression @ 0x7e4d2809e780> (<nodes.Expression object at 0x7e4d2809e7 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 63
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN expression . LexToken(SEMICOLON,';',8,63)
   yacc.py: 445:Action : Shift and goto state 84
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN expression SEMICOLON . LexToken(IF,'IF',9,66)
   yacc.py: 469:Action : Reduce rule [command -> identifier ASSIGN expression SEMICOLON] with [<Identifier @ 0x7e4d29022300>,':=',<Expression @ 0x7e4d2809e780>,';'] and goto state 43
   yacc.py: 506:Result : <Assign @ 0x7e4d287509e0> (<nodes.Assign object at 0x7e4d287509e0>)
   yacc.py: 410:
   yacc.py: 411:State  : 43
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands command . LexToken(IF,'IF',9,66)
   yacc.py: 469:Action : Reduce rule [commands -> commands command] with [<Commands @ 0x7e4d27779e80>,<Assign @ 0x7e4d287509e0>] and goto state 51
   yacc.py: 506:Result : <Commands @ 0x7e4d27779e80> (<nodes.Commands object at 0x7e4d27779e80 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 51
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands . LexToken(IF,'IF',9,66)
   yacc.py: 445:Action : Shift and goto state 25
   yacc.py: 410:
   yacc.py: 411:State  : 25
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF . LexToken(PID,'n',9,69)
   yacc.py: 445:Action : Shift and goto state 49
   yacc.py: 410:
   yacc.py: 411:State  : 49
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF PID . LexToken(GT,'>',9,70)
   yacc.py: 469:Action : Reduce rule [identifier -> PID] with ['n'] and goto state 48
   yacc.py: 506:Result : <Identifier @ 0x7e4d29411220> (<nodes.Identifier object at 0x7e4d294112 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 48
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF identifier . LexToken(GT,'>',9,70)
   yacc.py: 469:Action : Reduce rule [value -> identifier] with [<Identifier @ 0x7e4d29411220>] and goto state 46
   yacc.py: 506:Result : <Identifier @ 0x7e4d29411220> (<nodes.Identifier object at 0x7e4d294112 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 46
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF value . LexToken(GT,'>',9,70)
   yacc.py: 445:Action : Shift and goto state 68
   yacc.py: 410:
   yacc.py: 411:State  : 68
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF value GT . LexToken(PID,'p',9,71)
   yacc.py: 445:Action : Shift and goto state 49
   yacc.py: 410:
   yacc.py: 411:State  : 49
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF value GT PID . LexToken(THEN,'THEN',9,73)
   yacc.py: 469:Action : Reduce rule [identifier -> PID] with ['p'] and goto state 48
   yacc.py: 506:Result : <Identifier @ 0x7e4d290f3710> (<nodes.Identifier object at 0x7e4d290f37 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 48
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF value GT identifier . LexToken(THEN,'THEN',9,73)
   yacc.py: 469:Action : Reduce rule [value -> identifier] with [<Identifier @ 0x7e4d290f3710>] and goto state 93
   yacc.py: 506:Result : <Identifier @ 0x7e4d290f3710> (<nodes.Identifier object at 0x7e4d290f37 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 93
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF value GT value . LexToken(THEN,'THEN',9,73)
   yacc.py: 469:Action : Reduce rule [condition -> value GT value] with [<Identifier @ 0x7e4d29411220>,'>',<Identifier @ 0x7e4d290f3710>] and goto state 45
   yacc.py: 506:Result : <Condition @ 0x7e4d2959b320> (<nodes.Condition object at 0x7e4d2959b32 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 45
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF condition . LexToken(THEN,'THEN',9,73)
   yacc.py: 445:Action : Shift and goto state 65
   yacc.py: 410:
   yacc.py: 411:State  : 65
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF condition THEN . LexToken(WRITE,'WRITE',10,84)
   yacc.py: 445:Action : Shift and goto state 32
   yacc.py: 410:
   yacc.py: 411:State  : 32
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF condition THEN WRITE . LexToken(NUM,1,10,90)
   yacc.py: 445:Action : Shift and goto state 47
   yacc.py: 410:
   yacc.py: 411:State  : 47
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF condition THEN WRITE NUM . LexToken(SEMICOLON,';',10,91)
   yacc.py: 469:Action : Reduce rule [value -> NUM] with [1] and goto state 56
   yacc.py: 506:Result : <int @ 0xb359a8> (1)
   yacc.py: 410:
   yacc.py: 411:State  : 56
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF condition THEN WRITE value . LexToken(SEMICOLON,';',10,91)
   yacc.py: 445:Action : Shift and goto state 80
   yacc.py: 410:
   yacc.py: 411:State  : 80
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF condition THEN WRITE value SEMICOLON . LexToken(ELSE,'ELSE',11,94)
   yacc.py: 469:Action : Reduce rule [command -> WRITE value SEMICOLON] with ['WRITE',1,';'] and goto state 23
   yacc.py: 506:Result : <int @ 0xb359a8> (1)
   yacc.py: 410:
   yacc.py: 411:State  : 23
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF condition THEN command . LexToken(ELSE,'ELSE',11,94)
   yacc.py: 469:Action : Reduce rule [commands -> command] with [1] and goto state 90
   yacc.py: 506:Result : <Commands @ 0x7e4d290f3740> (<nodes.Commands object at 0x7e4d290f3740 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 90
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF condition THEN commands . LexToken(ELSE,'ELSE',11,94)
   yacc.py: 445:Action : Shift and goto state 111
   yacc.py: 410:
   yacc.py: 411:State  : 111
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF condition THEN commands ELSE . LexToken(WRITE,'WRITE',12,105)
   yacc.py: 445:Action : Shift and goto state 32
   yacc.py: 410:
   yacc.py: 411:State  : 32
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF condition THEN commands ELSE WRITE . LexToken(NUM,0,12,111)
   yacc.py: 445:Action : Shift and goto state 47
   yacc.py: 410:
   yacc.py: 411:State  : 47
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF condition THEN commands ELSE WRITE NUM . LexToken(SEMICOLON,';',12,112)
   yacc.py: 469:Action : Reduce rule [value -> NUM] with [0] and goto state 56
   yacc.py: 506:Result : <int @ 0xb35988> (0)
   yacc.py: 410:
   yacc.py: 411:State  : 56
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF condition THEN commands ELSE WRITE value . LexToken(SEMICOLON,';',12,112)
   yacc.py: 445:Action : Shift and goto state 80
   yacc.py: 410:
   yacc.py: 411:State  : 80
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF condition THEN commands ELSE WRITE value SEMICOLON . LexToken(ENDIF,'ENDIF',13,115)
   yacc.py: 469:Action : Reduce rule [command -> WRITE value SEMICOLON] with ['WRITE',0,';'] and goto state 23
   yacc.py: 506:Result : <int @ 0xb35988> (0)
   yacc.py: 410:
   yacc.py: 411:State  : 23
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF condition THEN commands ELSE command . LexToken(ENDIF,'ENDIF',13,115)
   yacc.py: 469:Action : Reduce rule [commands -> command] with [0] and goto state 119
   yacc.py: 506:Result : <Commands @ 0x7e4d29068230> (<nodes.Commands object at 0x7e4d29068230 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 119
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF condition THEN commands ELSE commands . LexToken(ENDIF,'ENDIF',13,115)
   yacc.py: 445:Action : Shift and goto state 123
   yacc.py: 410:
   yacc.py: 411:State  : 123
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands IF condition THEN commands ELSE commands ENDIF . LexToken(PID,'n',14,122)
   yacc.py: 469:Action : Reduce rule [command -> IF condition THEN commands ELSE commands ENDIF] with ['IF',<Condition @ 0x7e4d2959b320>,'THEN',<Commands @ 0x7e4d290f3740>,'ELSE',<Commands @ 0x7e4d29068230>,'ENDIF'] and goto state 43
   yacc.py: 506:Result : <IfStatement @ 0x7e4d2773e3f0> (<nodes.IfStatement object at 0x7e4d2773e ...)
   yacc.py: 410:
   yacc.py: 411:State  : 43
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands command . LexToken(PID,'n',14,122)
   yacc.py: 469:Action : Reduce rule [commands -> commands command] with [<Commands @ 0x7e4d27779e80>,<IfStatement @ 0x7e4d2773e3f0>] and goto state 51
   yacc.py: 506:Result : <Commands @ 0x7e4d27779e80> (<nodes.Commands object at 0x7e4d27779e80 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 51
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands . LexToken(PID,'n',14,122)
   yacc.py: 445:Action : Shift and goto state 29
   yacc.py: 410:
   yacc.py: 411:State  : 29
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands PID . LexToken(ASSIGN,':=',14,123)
   yacc.py: 469:Action : Reduce rule [identifier -> PID] with ['n'] and goto state 24
   yacc.py: 506:Result : <Identifier @ 0x7e4d290230b0> (<nodes.Identifier object at 0x7e4d290230 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 24
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier . LexToken(ASSIGN,':=',14,123)
   yacc.py: 445:Action : Shift and goto state 44
   yacc.py: 410:
   yacc.py: 411:State  : 44
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN . LexToken(PID,'n',14,125)
   yacc.py: 445:Action : Shift and goto state 49
   yacc.py: 410:
   yacc.py: 411:State  : 49
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN PID . LexToken(DIV,'/',14,126)
   yacc.py: 469:Action : Reduce rule [identifier -> PID] with ['n'] and goto state 48
   yacc.py: 506:Result : <Identifier @ 0x7e4d2809fb60> (<nodes.Identifier object at 0x7e4d2809fb ...)
   yacc.py: 410:
   yacc.py: 411:State  : 48
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN identifier . LexToken(DIV,'/',14,126)
   yacc.py: 469:Action : Reduce rule [value -> identifier] with [<Identifier @ 0x7e4d2809fb60>] and goto state 64
   yacc.py: 506:Result : <Identifier @ 0x7e4d2809fb60> (<nodes.Identifier object at 0x7e4d2809fb ...)
   yacc.py: 410:
   yacc.py: 411:State  : 64
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN value . LexToken(DIV,'/',14,126)
   yacc.py: 445:Action : Shift and goto state 88
   yacc.py: 410:
   yacc.py: 411:State  : 88
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN value DIV . LexToken(NUM,2,14,127)
   yacc.py: 445:Action : Shift and goto state 47
   yacc.py: 410:
   yacc.py: 411:State  : 47
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN value DIV NUM . LexToken(SEMICOLON,';',14,128)
   yacc.py: 469:Action : Reduce rule [value -> NUM] with [2] and goto state 109
   yacc.py: 506:Result : <int @ 0xb359c8> (2)
   yacc.py: 410:
   yacc.py: 411:State  : 109
   yacc.py: 430:Defaulted state 109: Reduce using 35
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN value DIV value . LexToken(SEMICOLON,';',14,128)
   yacc.py: 469:Action : Reduce rule [expression -> value DIV value] with [<Identifier @ 0x7e4d2809fb60>,'/',2] and goto state 63
   yacc.py: 506:Result : <Expression @ 0x7e4d29268320> (<nodes.Expression object at 0x7e4d292683 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 63
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN expression . LexToken(SEMICOLON,';',14,128)
   yacc.py: 445:Action : Shift and goto state 84
   yacc.py: 410:
   yacc.py: 411:State  : 84
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands identifier ASSIGN expression SEMICOLON . LexToken(UNTIL,'UNTIL',15,134)
   yacc.py: 469:Action : Reduce rule [command -> identifier ASSIGN expression SEMICOLON] with [<Identifier @ 0x7e4d290230b0>,':=',<Expression @ 0x7e4d29268320>,';'] and goto state 43
   yacc.py: 506:Result : <Assign @ 0x7e4d287af470> (<nodes.Assign object at 0x7e4d287af470>)
   yacc.py: 410:
   yacc.py: 411:State  : 43
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands command . LexToken(UNTIL,'UNTIL',15,134)
   yacc.py: 469:Action : Reduce rule [commands -> commands command] with [<Commands @ 0x7e4d27779e80>,<Assign @ 0x7e4d287af470>] and goto state 51
   yacc.py: 506:Result : <Commands @ 0x7e4d27779e80> (<nodes.Commands object at 0x7e4d27779e80 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 51
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands . LexToken(UNTIL,'UNTIL',15,134)
   yacc.py: 445:Action : Shift and goto state 73
   yacc.py: 410:
   yacc.py: 411:State  : 73
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands UNTIL . LexToken(PID,'n',15,140)
   yacc.py: 445:Action : Shift and goto state 49
   yacc.py: 410:
   yacc.py: 411:State  : 49
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands UNTIL PID . LexToken(EQ,'=',15,141)
   yacc.py: 469:Action : Reduce rule [identifier -> PID] with ['n'] and goto state 48
   yacc.py: 506:Result : <Identifier @ 0x7e4d290f3560> (<nodes.Identifier object at 0x7e4d290f35 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 48
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands UNTIL identifier . LexToken(EQ,'=',15,141)
   yacc.py: 469:Action : Reduce rule [value -> identifier] with [<Identifier @ 0x7e4d290f3560>] and goto state 46
   yacc.py: 506:Result : <Identifier @ 0x7e4d290f3560> (<nodes.Identifier object at 0x7e4d290f35 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 46
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands UNTIL value . LexToken(EQ,'=',15,141)
   yacc.py: 445:Action : Shift and goto state 66
   yacc.py: 410:
   yacc.py: 411:State  : 66
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands UNTIL value EQ . LexToken(NUM,0,15,142)
   yacc.py: 445:Action : Shift and goto state 47
   yacc.py: 410:
   yacc.py: 411:State  : 47
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands UNTIL value EQ NUM . LexToken(SEMICOLON,';',15,143)
   yacc.py: 469:Action : Reduce rule [value -> NUM] with [0] and goto state 91
   yacc.py: 506:Result : <int @ 0xb35988> (0)
   yacc.py: 410:
   yacc.py: 411:State  : 91
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands UNTIL value EQ value . LexToken(SEMICOLON,';',15,143)
   yacc.py: 469:Action : Reduce rule [condition -> value EQ value] with [<Identifier @ 0x7e4d290f3560>,'=',0] and goto state 98
   yacc.py: 506:Result : <Condition @ 0x7e4d287ac5c0> (<nodes.Condition object at 0x7e4d287ac5c ...)
   yacc.py: 410:
   yacc.py: 411:State  : 98
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands UNTIL condition . LexToken(SEMICOLON,';',15,143)
   yacc.py: 445:Action : Shift and goto state 114
   yacc.py: 410:
   yacc.py: 411:State  : 114
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands REPEAT commands UNTIL condition SEMICOLON . LexToken(END,'END',16,145)
   yacc.py: 469:Action : Reduce rule [command -> REPEAT commands UNTIL condition SEMICOLON] with ['REPEAT',<Commands @ 0x7e4d27779e80>,'UNTIL',<Condition @ 0x7e4d287ac5c0>,';'] and goto state 43
   yacc.py: 506:Result : <RepeatUntil @ 0x7e4d2865b380> (<nodes.RepeatUntil object at 0x7e4d2865b ...)
   yacc.py: 410:
   yacc.py: 411:State  : 43
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands command . LexToken(END,'END',16,145)
   yacc.py: 469:Action : Reduce rule [commands -> commands command] with [<Commands @ 0x7e4d287aecc0>,<RepeatUntil @ 0x7e4d2865b380>] and goto state 40
   yacc.py: 506:Result : <Commands @ 0x7e4d287aecc0> (<nodes.Commands object at 0x7e4d287aecc0 ...)
   yacc.py: 410:
   yacc.py: 411:State  : 40
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands . LexToken(END,'END',16,145)
   yacc.py: 445:Action : Shift and goto state 61
   yacc.py: 410:
   yacc.py: 411:State  : 61
   yacc.py: 430:Defaulted state 61: Reduce using 5
   yacc.py: 434:Stack  : procedures PROGRAM IS declarations BEGIN commands END . None
   yacc.py: 469:Action : Reduce rule [main -> PROGRAM IS declarations BEGIN commands END] with ['PROGRAM','IS',<Declarations @ 0x7e4d27779970>,'BEGIN',<Commands @ 0x7e4d287aecc0>,'END'] and goto state 4
   yacc.py: 506:Result : <Main @ 0x7e4d27779e50> (<nodes.Main object at 0x7e4d27779e50>)
   yacc.py: 410:
   yacc.py: 411:State  : 4
   yacc.py: 430:Defaulted state 4: Reduce using 1
   yacc.py: 434:Stack  : procedures main . None
   yacc.py: 469:Action : Reduce rule [program_all -> procedures main] with [<Procedures @ 0x7e4d2819d700>,<Main @ 0x7e4d27779e50>] and goto state 1
   yacc.py: 506:Result : <Program @ 0x7e4d2865b3b0> (<nodes.Program object at 0x7e4d2865b3b0>)
   yacc.py: 410:
   yacc.py: 411:State  : 1
   yacc.py: 434:Stack  : program_all . $end
   yacc.py: 571:Done   : Returning <Program @ 0x7e4d2865b3b0> (<nodes.Program object at 0x7e4d2865b3b0>)
   yacc.py: 572:PLY: PARSE DEBUG END
